# -*-makefile-*-
# Spheral++ main makefile

#-------------------------------------------------------------------------------
# These are the automatically generated Gnu install stuff.  Override with --prefix
prefix = @prefix@
exec_prefix = @exec_prefix@
includedir =   @includedir@
libdir = @libdir@

OSNAME = @OSNAME@
INSTALL = @INSTALL@
SPHERALBUILDDIR = @SPHERALBUILDDIR@
TPINCS = @TPINCS@
TPLIBS = @TPLIBS@
PYTHONEXE  = @PYTHON@
PYTHONVERSION = @PYTHONVERSION@
PYTHONCFLAGS = @PYTHONCFLAGS@ @OPT@
PYTHONCONFFLAGS = @PYTHONCONFFLAGS@
PYLIBDIR = @PYLIBDIR@
NUMPYFLAGS = @NUMPYFLAGS@
NUMPYCFLAGS = @NUMPYCFLAGS@
TOPLIBDIR =  $(libdir)
LIBDIR =     $(libdir)
PYTHONLIBDIR   = $(libdir)/python$(PYTHONVERSION)/site-packages
THIRDPARTYLIBDIR = $(prefix)/lib
THIRDPARTYINCDIR = $(prefix)/include
BUILDWILDMAGIC = @BUILDWILDMAGIC@
WILDMAGICTARGET = @WILDMAGICTARGET@
SILOFLAGS = @SILOFLAGS@
BOOSTROOT = @BOOSTROOT@
JAMTOOLSET = @JAMTOOLSET@
JAMTOOLSETOPTS = @JAMTOOLSETOPTS@
JAMOPTS = @JAMOPTS@
BOOSTEXT = @BOOSTEXT@
BOOSTLIBTARGETS = @BOOSTLIBTARGETS@
DYLIBEXT = @DYLIBEXT@
SHLIBEXT = @SHLIBEXT@
EXTRATHIRDPARTYTARGETS = @EXTRATHIRDPARTYTARGETS@
PIPTARGETS = @PIPTARGETS@
MPIPYTHONINTERFACETARGET = @MPIPYTHONINTERFACETARGET@
PETSCTARGETS = @PETSCTARGETS@
PETSCOPTS = @PETSCOPTS@
MATPLOTLIBTARGETS = @MATPLOTLIBTARGETS@
TAUVERSION = # @TAUVERSION@
TAUTARGET = # @TAUTARGET@
TAUCONFIGUREFLAGS = # @TAUCONFIGUREFLAGS@
TAUARCH = # @TAUARCH@
EASYPROFILELIBS = @EASYPROFILELIBS@
HTMLDOCDIR = $(prefix)/PythonInterfaceDoc
BPLINCS = @BPLINCS@
HDF5FLAGS = @HDF5FLAGS@
POLYTOPEFLAGS = @POLYTOPEFLAGS@
POLYTOPELIBS = @POLYTOPELIBS@
USE_POLYTOPE = @USE_POLYTOPE@
USE_TRIANGLE = @USE_TRIANGLE@
USE_TETGEN = @USE_TETGEN@
FFTWFLAGS = @FFTWFLAGS@

ANEOSSRCS = @ANEOSSRCS@
ANEOSFSRCS = @ANEOSFSRCS@
ANEOSLIBS = @ANEOSLIBS@

GEODYNSRCS = @GEODYNSRCS@
GEODYNLIBS = @GEODYNLIBS@

HELMSRCS = @HELMSRCS@
HELMFSRCS = @HELMFSRCS@
HELMLIBS = @HELMLIBS@


OPENSUBDIVTARGETS = @OPENSUBDIVTARGETS@
OPENSUBDIVLIBS = @OPENSUBDIVLIBS@

UTILDIR = $(SPHERALTOP)/Utilities

WMLIBEXT = @WMLIBEXT@
WILDMAGICINCDIR = $(prefix)/WildMagic5/Include
WILDMAGICLIBDIR = $(prefix)/WildMagic5/Library/$(WILDMAGICTARGET)
WILDMAGICLIBS = -lWm5Core -lWm5Imagics -lWm5Mathematics -lWm5Physics

PYTHONDATEFILE = lastpythonmake
PYSTEDATE = .pystedate
PBGDATE = .pybdate
PYSTEDEPENDDATE = .pystedependdate
PYSTEOBJSDATE = .pysteobjsdate

TAULIBS = # @TAULIBS@
LIBS = -L$(LIBDIR) @LIBS@ @AIXLIBS@ $(TPLIBS) $(POLYTOPELIBS) $(TAULIBS) $(PARMETISLIBS) $(OPENSUBDIVLIBS) $(EASYPROFILELIBS)

DEPENDLIBS := $(patsubst %, -l%, $(DEPENDS))

# g++ flags

# Allow developers to override optimization flag
ifneq ("$(opt_override)","")
C_OPT:=$(opt_override)
else
C_OPT:=@OPT@
endif

#set compile line here
CC = @CC@
CXX = @CXX@
FORT = @FORT@
MPICC = @MPICC@
MPICXX = @MPICXX@
PYTHONCC = @PYTHONCC@
PYTHONCXX = @PYTHONCXX@
CMAKEEXE = @CMAKEEXE@
CMAKECC = @CMAKECC@
CMAKECXX = @CMAKECXX@
TAUCC = # @TAUCC@
TAUCXX = # @TAUCXX@
MAKEIMPORTFILE = @MAKEIMPORTFILE@
TAUFLAGS = # @TAUFLAGS@
DEPFLAG  =   @DEPFLAG@   
CFLAGS   =   @CFLAGS@ $(INCS) $(TAUFLAGS)
CXXFLAGS =   @CXXFLAGS@ $(INCS) $(TAUFLAGS)
EXTRAFLAGS = @EXTRAFLAGS@
EXTRAINCLUDES = @EXTRAINCLUDES@
MPICCFLAGS = @MPICCFLAGS@
MPICXXFLAGS = @MPICXXFLAGS@
FORTFLAGS =   @FORTFLAGS@
DYNLIBFLAG = @DYNLIBFLAG@
SHAREDFLAG = @SHAREDFLAG@
OPTFLAGS =   @OPT@
DISTRIBUTEDOPT = @DISTRIBUTEDOPT@
PARMETISPATH = @PARMETISPATH@
PARMETISTARGET = @PARMETISTARGET@
PARMETISBPLTARGET = @PARMETISBPLTARGET@
PARMETISINCS = @PARMETISINCS@
PARMETISLIBS = @PARMETISLIBS@
MPI4PYCC = @MPI4PYCC@

PYOPT = @PYOPT@

FORTLINK = @FORTLINK@
LDFLAGS = @LDFLAGS@
LDRPATH = @LDRPATH@
LDINSTALLNAME = @LDINSTALLNAME@
MODULELINK = @MODULELINK@
LIBTARGETFLAGS = @LIBTARGETFLAGS@
SHLIBEXT = @SHLIBEXT@

EMPTY :=
SPACE := $(EMPTY) $(EMPTY)

INCS = $(EXTRAINCLUDES) $(TPINCS) -I$(SPHERALTOP) -I$(srcdir) -I$(BOOSTROOT) -I$(prefix)/include

#-------------------------------------------------------------------------------
# Augment the SRCTARGETS with generated instantiation files.
EXTRAINSTSRCTARGETS = $(filter-out %Inst.cc.py,$(INSTSRCTARGETS))
ifeq "@INST1D@" "yes"
  EXTRAINSTSRCTARGETS += $(subst Inst.cc.py,Inst1d.cc,$(filter %Inst.cc.py,$(INSTSRCTARGETS)))
  CXXFLAGS += -DSPHERAL1D
endif
ifeq "@INST2D@" "yes"
  EXTRAINSTSRCTARGETS += $(subst Inst.cc.py,Inst2d.cc,$(filter %Inst.cc.py,$(INSTSRCTARGETS)))
  CXXFLAGS += -DSPHERAL2D
endif
ifeq "@INST3D@" "yes"
  EXTRAINSTSRCTARGETS += $(subst Inst.cc.py,Inst3d.cc,$(filter %Inst.cc.py,$(INSTSRCTARGETS)))
  CXXFLAGS += -DSPHERAL3D
endif
EXTRAINSTOBJS = $(notdir $(EXTRAINSTSRCTARGETS:.cc=.o))
SRCTARGETS += $(EXTRAINSTSRCTARGETS)

#-------------------------------------------------------------------------------
OBJS = $(notdir $(SRCTARGETS:.cc=.o) $(FSRCTARGETS:.f=.o) $(F90SRCTARGETS:.f90=.o))

#-------------------------------------------------------------------------------
# Static lib based on the dynamic library.
STATICLIBTARGET = $(LIBTARGET:.$(DYLIBEXT)=.a)

#-------------------------------------------------------------------------------
# Static Python bindings based on the dynamic library.
STATICPBGMODTARGET = $(PBGMODTARGET:.$(SHLIBEXT)=.a)

#-------------------------------------------------------------------------------
# Find all the header files in the current directory.
HEADERS = $(wildcard $(srcdir)/*.hh $(srcdir)/*.h)

#-------------------------------------------------------------------------------
CXXPKGS = @CXXPKGS@
CXXPKGLIBS = $(patsubst %, Spheral_%, @CXXPKGLIBS@)
PKGLIBS := $(patsubst %, -l%, $(CXXPKGLIBS))

#-------------------------------------------------------------------------------
# Python binding stuff
PYTHONBINDING = @PYTHONBINDING@
PYTHONPKGDIR = @PYTHONPKGDIR@

# Pybindgen
ifeq "$(PYTHONBINDING)" "PYBINDGEN"
  EXTRAINCLUDES += -I$(prefix)/include/python$(PYTHONVERSION)
  FILTEREDPYTHONPKGS = $(filter-out $(PKGNAME), $(filter-out Python, $(PYTHONPKGS)))

  PBGSRCS = $(patsubst %, $(SPHERALMODULES)_%.C, $(PYTHONPKGS)) $(SPHERALMODULES).C
  PBGOBJS = $(PBGSRCS:.C=.o)
  PBGMODHEADERS = $(SPHERALMODULES).hh $(SPHERALMODULES).h
  PBGMODSRCS = $(SPHERALMODULES).C $(PBGMODHEADERS)
  MODPKGS = $(patsubst %, $(srcdir)/%, $(join $(PYTHONPKGS), $(patsubst %, /%Module.py, $(PYTHONPKGS))))

  ifneq "$(PBGTARGET)" ""
    PBGTARGETDATE = $(patsubst %, .%.date, $(PBGTARGET:.py=))
  endif

else

# Pybind11 
  EXTRAINCLUDES += -I$(prefix)/include/python$(PYTHONVERSION)
  FILTEREDPYTHONPKGS = $(filter-out $(PKGNAME), $(filter-out Python, $(PYTHONPKGS)))
endif

#-------------------------------------------------------------------------------
# Set up out special handling for AIX.
SYSNAME = $(shell uname -s)
AIXSHELL=@AIXSHELL@
CONFIG_SHELL=@CONFIG_SHELL@

#-------------------------------------------------------------------------------
.SUFFIXES:      .hh .h .cc .o .d $(DYLIBEXT) $(SHLIBEXT)
.SUFFIXES:	Methods.pw Methods.cc Methods.o
.SUFFIXES:	Bindings.py
.SUFFIXES:	Wrap.cc Wrap.o
.SUFFIXES:      .pyste .cpp
.SUFFIXES:      .C .py
.SUFFIXES:      .f
.SUFFIXES:	Inst.cc.py Inst1d.cc Inst2d.cc Inst3d.cc

.PHONY: all install force_build $(PYTHONDATEFILE)

all:	@ALL@

install_headers:
	@mkdir -p $(includedir)/$(PKGNAME)
	@if test "$(HEADERS)" != "" ; then \
		it="$(HEADERS)" ; \
	        for i in $$it ; do \
			$(INSTALL) $$i $(includedir)/$(PKGNAME) ; \
	                echo "installing $$i in $(includedir)/$(PKGNAME)" ; \
	        done \
	fi

force_build:

# %.py:
# 	@mkdir -p $(LIBDIR)
# 	rm -f $(LIBDIR)/$*.py
# 	cp -f $*.py $(LIBDIR)
# 	chmod 644 $(LIBDIR)/$*.py

%.exe: %.cc force_build
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(OPTFLAGS) $(EXTRAINCLUDES) $(LIBS) $(EXTRALIBS) $(PKGLIBS) $(LDFLAGS) $< -o $(*F).exe

%Methods.o: %Methods.pw
	@mkdir -p .MethodsSource
	@rm -f .MethodsSource/$*Methods.cc
	@$(PYTHONEXE) $(PYFFLEDIR)/pyffle.py $*Methods.pw > .MethodsSource/$(*F)Methods.cc
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(PYFFLEOPT) $(EXTRAFLAGS) -I. -w -c .MethodsSource/$(*F)Methods.cc -o $(*F)Methods.o

%Wrap.o: %Wrap.cc
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(PYOPT) $(EXTRAFLAGS) -c $< -o $(*F)Wrap.o

%.o: %.cc
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(OPTFLAGS) $(EXTRAFLAGS) -c $< -o $(*F).o

%.o: %.f
	$(FORT) $(FORTFLAGS) $(OPTFLAGS) $(EXTRAFLAGS) -c $< -o $(*F).o

%.o: %.f90
	$(FORT) $(FORTFLAGS) -c $< -o $(*F).o

%.o:	%.cpp
	$(MPICXX) $(MPICXXFLAGS) $(INCS) $(BPLINCS) $(CXXFLAGS) $(PYOPT) $(EXTRAFLAGS) -I. -c $< -o $(*F).o

%.o:	%.C
	$(MPICXX) $(MPICXXFLAGS) $(INCS) $(EXTRAINCLUDES) -I$(srcdir) $(CXXFLAGS) $(PYOPT) $(EXTRAFLAGS) -I. -c $< -o $(*F).o

%Inst1d.cc:	%Inst.cc.py
	@$(PYTHONEXE) $(SPHERALTOP)/helpers/InstantiationGenerator.py $< $@ 1

%Inst2d.cc:	%Inst.cc.py
	@$(PYTHONEXE) $(SPHERALTOP)/helpers/InstantiationGenerator.py $< $@ 2

%Inst3d.cc:	%Inst.cc.py
	@$(PYTHONEXE) $(SPHERALTOP)/helpers/InstantiationGenerator.py $< $@ 3

# Machine dependent rules for generating dependency files.
include $(SPHERALTOP)/helpers/@DEPENDRULES@

.INTERMEDIATE:	Methods.cc
.DELETE_ON_ERROR: Methods.cc

#-------------------------------------------------------------------------------
ifneq "$(SRCTARGETS)" ""
-include $(notdir $(SRCTARGETS:.cc=.d))
endif

ifneq "$(F90SRCTARGETS)" ""
-include $(notdir $(F90SRCTARGETS:.f90=.d))
endif

ifneq "$(FSRCTARGETS)" ""
-include $(notdir $(FSRCTARGETS:.f=.d))
endif

ifneq "$(BPLTARGETS)" "" 
-include $(notdir $(BPLTARGETS:.cpp=.d))
endif

ifneq "$(PYSTETARGETS)" "" 
-include $(notdir $(PYSTETARGETS:.pyste=.d))
endif

ifneq "$(PYFFLETARGETS)" ""
-include $(notdir $(PYFFLETARGETS:.pw=.d))
endif

ifneq "$(PBGTARGET)" ""
-include $(notdir $(PBGTARGET:.py=.py.d))
endif

ifneq "$(PYB11ARGET)" ""
-include $(notdir $(PYB11TARGET:.cc=.d))
endif

#-------------------------------------------------------------------------------
$(LIBTARGET): $(OBJS) $(PYFFLEOBJS) $(EXETARGETS)
	@echo "################################################################################"
	@echo "# Building library $(LIBTARGET)"
	@echo "################################################################################"
	@mkdir -p $(LIBDIR)
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(OPTFLAGS) $(DYNLIBFLAG) $(EXTRAINCLUDES) $(LDINSTALLNAME) $(LIBTARGET) $(OBJS) $(PYFFLEOBJS) $(LDFLAGS) $(LDRPATH) $(LIBS) $(EXTRALIBS) $(DEPENDLIBS) $(LIBTARGETFLAGS)
	cp -f $(LIBTARGET) $(LIBDIR)

#-------------------------------------------------------------------------------
$(STATICLIBTARGET): $(LIBTARGET)
	@echo "################################################################################"
	@echo "# Building library $(STATICLIBTARGET)"
	@echo "################################################################################"
	@mkdir -p $(LIBDIR)
	ar rcs $(STATICLIBTARGET) $(OBJS) $(PYFFLEOBJS)
	cp -f $(STATICLIBTARGET) $(LIBDIR)

#-------------------------------------------------------------------------------
$(THIRDPARTYLIBTARGET): $(OBJS) $(PYFFLEOBJS) $(EXETARGETS)
	@echo "################################################################################"
	@echo "# Building library $(THIRDPARTYLIBTARGET)"
	@echo "################################################################################"
	@mkdir -p $(THIRDPARTYLIBDIR)
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(OPTFLAGS) $(DYNLIBFLAG) $(EXTRAINCLUDES) $(LDINSTALLNAME) $(THIRDPARTYLIBTARGET) $(OBJS) $(PYFFLEOBJS) $(LDFLAGS) $(LDRPATH) $(LIBS) $(EXTRALIBS) $(DEPENDLIBS) 
	cp -f $(THIRDPARTYLIBTARGET) $(THIRDPARTYLIBDIR)

#-------------------------------------------------------------------------------
$(INCTARGETS): force_build
	@echo "################################################################################"
	@echo "# Building include targets $(INCTARGETS)"
	@echo "################################################################################"
	cp -f $(INCTARGETS) $(THIRDPARTYINCDIR)

#-------------------------------------------------------------------------------
$(PYSTEDATE): $(PYSTETARGETS)
	@echo "################################################################################"
	@echo "# Generating Boost.Python source for $(MODTARGET)"
	@echo "################################################################################"
	$(SHELL) -ec 'export PATH=$(prefix)/bin:$$PATH; \
	env GCCXML_COMPILER=$(GCCXMLCXX) $(PYTHONEXE) $(PYSTE) $(INCS) $(BPLINCS) --module=$(PKGNAME) --multiple --out=.$(PKGNAME) $(PYSTETARGETS); \
	for f in $(PYSTEBASES); do \
	mv .$(PKGNAME)/_$$f.cpp .$(PKGNAME)/$$f.cpp; \
	done'
	touch $(PYSTEDATE)

$(MODTARGET): $(BPLOBJS) $(OBJS) $(PYSTEDATE)
	@echo "################################################################################"
	@echo "# Building module $(MODTARGET)"
	@echo "################################################################################"
	mkdir -p $(LIBDIR)
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(PYOPT) $(SHAREDFLAG) $(EXTRAINCLUDES) -o $(MODTARGET) $(PYSTEOBJS) $(BPLOBJS) .$(PKGNAME)/_main.o $(OBJS) $(MODULELINK) $(LDFLAGS) $(LDRPATH) $(LIBS) $(EXTRALIBS) $(DEPENDLIBS) 
	cp -f $(MODTARGET) $(PYTHONLIBDIR)/Spheral

#-------------------------------------------------------------------------------
$(BPLMODTARGET): $(BPLOBJS) $(OBJS)
	@echo "################################################################################"
	@echo "# Building module $(BPLMODTARGET)"
	@echo "################################################################################"
	mkdir -p $(LIBDIR)
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(PYOPT) $(SHAREDFLAG) $(EXTRAINCLUDES) -o $(BPLMODTARGET) $(BPLOBJS) $(OBJS) $(MODULELINK) $(LDFLAGS) $(LDRPATH) $(LIBS) $(EXTRALIBS) $(DEPENDLIBS) 
	cp -f $(BPLMODTARGET) $(PYTHONLIBDIR)/Spheral

#-------------------------------------------------------------------------------
$(PYB11TARGET): $(OBJS)
	@echo "################################################################################"
	@echo "# Building module $(PYB11TARGET)"
	@echo "################################################################################"
	@mkdir -p $(PYTHONLIBDIR)/Spheral
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(PYOPT) $(SHAREDFLAG) $(EXTRAINCLUDES) -I$(srcdir) -o $(PYB11TARGET) $(OBJS) $(MODULELINK) $(LDFLAGS) $(LDRPATH) $(LIBS) $(EXTRALIBS) $(DEPENDLIBS) $(LDRPATH) $(LDRPATH) $(LIBS) $(LIBS)
	cp -f $(PYB11TARGET) $(PYTHONLIBDIR)/Spheral

#-------------------------------------------------------------------------------
$(PBGTARGETDATE):  $(PBGTARGET)
	@echo "################################################################################"
	@echo "# Building sources $(PBGTARGET) $(PBGSRCS)"
	@echo "################################################################################"
	env PYTHONPATH="$(srcdir):$(subst $(SPACE),:,$(patsubst %,$(srcdir)/%,$(PYTHONPKGS))):$(PYLIBDIR)" $(PYTHONEXE) $(PBGTARGET) $(SPHERALMODULES).C
	touch $(PBGTARGETDATE)

$(PBGSRCS):	$(PBGTARGETDATE)

$(PBGOBJS):	$(PBGSRCS)

$(PBGMODTARGET): $(PBGOBJS)
	@echo "################################################################################"
	@echo "# Building module $(PBGMODTARGET)"
	@echo "################################################################################"
	@mkdir -p $(PYTHONLIBDIR)/Spheral
	$(MPICXX) $(MPICXXFLAGS) $(INCS) $(EXTRAINCLUDES) -I$(srcdir) $(CXXFLAGS) $(PYOPT) $(EXTRAFLAGS) -c $(SPHERALMODULES).C -o $(SPHERALMODULES).o
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(PYOPT) $(SHAREDFLAG) $(EXTRAINCLUDES) -I$(srcdir) -o $(PBGMODTARGET) $(PBGOBJS) $(OBJS) $(MODULELINK) $(LDFLAGS) $(LDRPATH) $(LIBS) $(EXTRALIBS) $(DEPENDLIBS) 
	cp -f $(PBGMODTARGET) $(PYTHONLIBDIR)/Spheral

$(STATICPBGMODTARGET): $(PBGMODTARGET)
	@echo "################################################################################"
	@echo "# Building module $(STATICPBGMODTARGET)"
	@echo "################################################################################"
	@mkdir -p $(PYTHONLIBDIR)/Spheral
	ar -rvs $(STATICPBGMODTARGET) $(PBGOBJS)
	cp -f $(STATICPBGMODTARGET) $(PYTHONLIBDIR)/Spheral

#-------------------------------------------------------------------------------
$(LINKLIST):	$(OBJS)
	rm -fr $(LINKLIST)
	$(PYTHONEXE) $(SPHERALTOP)/helpers/prepend_dir.py -c "prepend('$(LIBTARGET)', '$(PKGDIR)')" > $(LINKLIST)

#-------------------------------------------------------------------------------
$(PYTHONTARGETS):	$(PYTHONDATEFILE)
	@mkdir -p $(PYTHONLIBDIR)/Spheral
	rm -f $(PYTHONLIBDIR)/Spheral/$(*F).py
	cp -f $*.py $(PYTHONLIBDIR)/Spheral
	chmod 644 $(PYTHONLIBDIR)/Spheral/$(*F).py

#-------------------------------------------------------------------------------
$(PYTHONDATEFILE):

#-------------------------------------------------------------------------------
docs:
	pushd $(SPHERALTOP) && doxygen spheral.doxygen && popd

#-------------------------------------------------------------------------------
clean:
	rm -fr $(LIBTARGET) $(STATICLIBTARGET) $(MODTARGET) $(PBGMODTARGET) $(STATICPBGMODTARGET) $(EXETARGETS) $(OBJS) $(BPLOBJS) $(OBJS:.o=.d) $(BPLOBJS:.o=.d) $(PBGTARGETDATE) $(PBGSRCS) $(PBGOBJS) $(PBGMODSRCS) $(PYSTEOBJS) $(PYSTECPPS) $(LASTPYSTEMAKE) .$(PKGNAME) $(PYTHONDATEFILE) $(PBGTARGETS:.py=.C) $(PBGTARGET:.py=.py.d) $(PYB11TARGET:.cc=.$(SHLIBEXT)) $(notdir $(EXTRAINSTSRCTARGETS)) $(EXTRAINSTOBJS) $(EXTRAINSTOBJS:.o=.d)

#-------------------------------------------------------------------------------
spotless:
	make clean
	rm -fr *.so *.dylib *.o *.d *.imp *.exp *Methods.cc .MethodsSource *~

#-------------------------------------------------------------------------------
install: all $(LIBTARGET) $(LIBDIR)

#-------------------------------------------------------------------------------
ifneq "@POSTGRES@" ""
dbinstall:
	sh postgres/createSpheral.sql

dbclean:
	sh postgres/destroySpheral.sql
else
dbinstall:

dbclean:

endif

