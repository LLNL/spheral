# -*-makefile-*-
# Spheral++ main makefile

#-------------------------------------------------------------------------------
SPHERALDIR = @SPHERALDIR@
SRCTOP = @SRCDIR@
TOPLIBDIR =  @TOPLIBDIR@
LIBDIR =     @LIBDIR@
PYTHONDIR  = @PYINCLUDEDIR@
PYTHONLIBDIR   = @PYLIBDIR@
#PYTHONLIBS = @PYLIBS@
THIRDPARTYLIBDIR = $(SPHERALDIR)/lib
THIRDPARTYINCDIR = $(SPHERALDIR)/include
BUILDWILDMAGIC = @BUILDWILDMAGIC@
WILDMAGICTARGET = @WILDMAGICTARGET@
SILOFLAGS = @SILOFLAGS@
PYTHONEXE  = @PYTHON@
PYTHONVERSION = @PYTHONVERSION@
PYTHONROOT = @PYTHONROOT@
PYTHONCFLAGS = @PYTHONCFLAGS@ @OPT@
PYTHONCONFFLAGS = @PYTHONCONFFLAGS@
PYMPIEXE = @PYMPI@
BOOSTROOT = @BOOSTROOT@
PYSTEPATH = @PYSTEPATH@
JAMTOOLSET = @JAMTOOLSET@
JAMTOOLSETOPTS = @JAMTOOLSETOPTS@
JAMOPTS = @JAMOPTS@
BOOSTEXT = @BOOSTEXT@
BOOSTLIBTARGETS = @BOOSTLIBTARGETS@
BOOSTPYTHONTARGET = @BOOSTPYTHONTARGET@
GCCXMLTARGETS = @GCCXMLTARGETS@
DYLIBEXT = @DYLIBEXT@
SHLIBEXT = @SHLIBEXT@
MPITHIRDPARTYTARGETS = @MPITHIRDPARTYTARGETS@
MPIPYTHONINTERFACETARGET = @MPIPYTHONINTERFACETARGET@
PETSCTARGETS = @PETSCTARGETS@
PETSCOPTS = @PETSCOPTS@
MATPLOTLIBTARGETS = @MATPLOTLIBTARGETS@
SCIPYTARGETS = @SCIPYTARGETS@
PSYCOTHIRDPARTYTARGET = @PSYCOTHIRDPARTYTARGET@
NUMPYTHIRDPARTYTARGETS = @NUMPYTHIRDPARTYTARGETS@
GCCXMLDIST = @GCCXMLDIST@
TAUVERSION = @TAUVERSION@
TAUTARGET = @TAUTARGET@
TAUCONFIGUREFLAGS = @TAUCONFIGUREFLAGS@
TAUARCH = @TAUARCH@
PYSTE = $(PYSTEPATH)/pyste.py
HTMLDOCDIR = $(SPHERALDIR)/PythonInterfaceDoc
BPLINCS = @BPLINCS@
HDF5FLAGS = @HDF5FLAGS@
POLYTOPEFLAGS = @POLYTOPEFLAGS@

UTILDIR = $(SRCTOP)/Utilities
HDFINCDIR = /usr/local/Spheral++/include
HDFLIBDIR = /usr/local/Spheral++/lib

WMLIBEXT = @WMLIBEXT@
WILDMAGICINCDIR = $(SPHERALDIR)/WildMagic5/Include
WILDMAGICLIBDIR = $(SPHERALDIR)/WildMagic5/Library/$(WILDMAGICTARGET)
WILDMAGICLIBS = -lWm5Core -lWm5Imagics -lWm5Mathematics -lWm5Physics

PYTHONDATEFILE = lastpythonmake
PYSTEDATE = .pystedate
PBGDATE = .pybdate
PYSTEDEPENDDATE = .pystedependdate
PYSTEOBJSDATE = .pysteobjsdate

OBJS = $(SRCTARGETS:.cc=.o) $(F77TARGETS:.f=.o)

TAULIBS = @TAULIBS@
LIBS =  -L$(WILDMAGICLIBDIR) $(WILDMAGICLIBS) -L$(TOPLIBDIR) -L$(LIBDIR) @LIBS@ @AIXLIBS@ $(TAULIBS)
PAPILIBS = @PAPILIBS@
GADGET_PATH = @GADGET_PATH@

DEPENDLIBS := $(patsubst %, -l%, $(DEPENDS))

# g++ flags

INCS = $(EXTRAINCLUDES) -I$(UTILDIR) -I$(SRCTOP) -I$(BOOSTROOT) -I$(SRCTOP)/../../include -I$(WILDMAGICINCDIR)

# Allow developers to override optimization flag
ifneq ("$(opt_override)","")
C_OPT:=$(opt_override)
else
C_OPT:=@OPT@
endif

#set compile line here
CC =  @CC@
CXX = @CXX@
F77 = @F77@
MPICC = @MPICC@
MPICXX = @MPICXX@
PYTHONCC = @PYTHONCC@
PYTHONCXX = @PYTHONCXX@
GCCXMLCC = @GCCXMLCC@
GCCXMLCXX = @GCCXMLCXX@
CMAKECC = @CMAKECC@
CMAKECXX = @CMAKECXX@
TAUCC = @TAUCC@
TAUCXX = @TAUCXX@
MAKEIMPORTFILE = @MAKEIMPORTFILE@
TAUFLAGS = @TAUFLAGS@
DEPFLAG  =   @DEPFLAG@   
CFLAGS   =   @CFLAGS@ $(INCS) $(TAUFLAGS)
CXXFLAGS =   @CXXFLAGS@ $(INCS) $(TAUFLAGS)
MPICCFLAGS = @MPICCFLAGS@
MPICXXFLAGS = @MPICXXFLAGS@
F77FLAGS =   @F77FLAGS@
DYNLIBFLAG = @DYNLIBFLAG@
SHAREDFLAG = @SHAREDFLAG@
OPTFLAGS =   @OPT@
DISTRIBUTEDOPT = @DISTRIBUTEDOPT@
PARMETISPATH = @PARMETISPATH@
PARMETISTARGET = @PARMETISTARGET@
PARMETISBPLTARGET = @PARMETISBPLTARGET@
PARMETISINCS = @PARMETISINCS@
PARMETISLIBS = @PARMETISLIBS@

PYOPT = @PYOPT@

LDFLAGS = @LDFLAGS@
MODULELINK = @MODULELINK@
LIBTARGETFLAGS = @LIBTARGETFLAGS@
SHLIBEXT = @SHLIBEXT@

#-------------------------------------------------------------------------------
CXXPKGS = @CXXPKGS@
CXXPKGLIBS = @CXXPKGLIBS@ 
# CXXPKGLIBS = $(filter-out SimulationControl, $(CXXPKGS))
PKGLIBS := $(patsubst %, -l%, $(CXXPKGLIBS))

#-------------------------------------------------------------------------------
# Pybindgen stuff
PYTHONBINDING = @PYTHONBINDING@
ifeq "$(PYTHONBINDING)" "PYBINDGEN"
  EXTRAINCLUDES += -I$(SPHERALDIR)/include/python$(PYTHONVERSION)
  FILTEREDPYTHONPKGS = $(filter-out $(PKGNAME), $(filter-out Python, $(PYTHONPKGS)))

  PBGSRCS = $(patsubst %, $(SPHERALMODULES)_%.C, $(PYTHONPKGS))
  PBGOBJS = $(PBGSRCS:.C=.o)
  PBGMODHEADERS = $(SPHERALMODULES).hh
  PBGMODSRCS = $(SPHERALMODULES).C $(PBGMODHEADERS)
  PBGMODOBJ = $(SPHERALMODULES).o
  MODPKGS = $(join $(PYTHONPKGS), $(patsubst %, /%Module.py, $(PYTHONPKGS)))

  ifneq "$(PBGTARGET)" ""
    PBGTARGETDATE = $(patsubst %, .%.date, $(PBGTARGET:.py=))
  endif

else
#-------------------------------------------------------------------------------
# BPL stuff
  BPLPKGS = @PYTHONPKGS@
  FILTEREDPYTHONPKGS = $(filter-out $(PKGNAME), $(filter-out Python, $(PYTHONPKGS)))
  PYSTEBASES = $(PYSTETARGETS:.pyste=)
  GENERATEDPYSTECPPS = $(patsubst %, $(PKGNAME)/_%.cpp, $(PYSTEBASES))
  PYSTECPPS = $(patsubst %, .$(PKGNAME)/%, $(PYSTETARGETS:.pyste=.cpp))
  PYSTEOBJS = $(PYSTETARGETS:.pyste=.o)
  PYSTEDEPENDS = $(PYSTETARGETS:.pyste=.d)

  BPLOBJS = $(BPLTARGETS:.cpp=.o)
endif

#-------------------------------------------------------------------------------
# Set up out special handling for AIX.
SYSNAME = $(shell uname -s)
AIXSHELL=@AIXSHELL@
CONFIG_SHELL=@CONFIG_SHELL@

#-------------------------------------------------------------------------------
.SUFFIXES:      .hh .cc .o .d $(DYLIBEXT) $(SHLIBEXT)
.SUFFIXES:	Methods.pw Methods.cc Methods.o
.SUFFIXES:	Bindings.py
.SUFFIXES:	Wrap.cc Wrap.o
.SUFFIXES:      .pyste .cpp
.SUFFIXES:      .C .py
.SUFFIXES:      .f

.PHONY: all install force_build $(PYTHONDATEFILE)

all:	$(PYTHONTARGETS) $(LIBTARGET) $(MODTARGET) $(BPLMODTARGET) $(PBGMODTARGET) $(EXETARGETS) $(THIRDPARTYLIBTARGET) $(INCTARGETS) $(INSTALLTARGETS)

force_build:

# %.py:
# 	@mkdir -p $(LIBDIR)
# 	rm -f $(LIBDIR)/$*.py
# 	cp -f $*.py $(LIBDIR)
# 	chmod 644 $(LIBDIR)/$*.py

%.exe: %.cc force_build
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(OPTFLAGS) $(EXTRAINCLUDES) $(LIBS) $(EXTRALIBS)  $(PKGLIBS) $(LDFLAGS) $< -o $*.exe

%Methods.o: %Methods.pw
	@mkdir -p .MethodsSource
	@rm -f .MethodsSource/$*Methods.cc
	@$(PYTHONEXE) $(PYFFLEDIR)/pyffle.py $*Methods.pw > .MethodsSource/$*Methods.cc
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(PYFFLEOPT) $(EXTRAFLAGS) -I. -w -c .MethodsSource/$*Methods.cc -o $*Methods.o

%Wrap.o: %Wrap.cc
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(PYOPT) $(EXTRAFLAGS) -c $< -o $*Wrap.o

%.o: %.cc
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(OPTFLAGS) $(EXTRAFLAGS) -c $< -o $*.o

%.o: %.f
	$(F77) $(F77FLAGS) $(OPTFLAGS) $(EXTRAFLAGS) -c $< -o $*.o

# %.C: %.py # $(MODPKGS)
# 	$(PYTHONEXE) $< $(PYTHONPKGS) $*.C

# %.C: SpheralModules.py
# 	$(PYTHONEXE) SpheralModules.py $(PYTHONPKGS) SpheralModules.C

# %.o: %.py
# 	$(PYTHONEXE) $< $(PYTHONPKGS) .$*.C
# 	$(MPICXX) $(MPICXXFLAGS) $(INCS) $(EXTRAINCLUDES) $(CXXFLAGS) $(PYOPT) $(EXTRAFLAGS) -I. -c .$*.C -o $*.o
# 	@rm -f .$*.C

#%.cpp:	%.pyste
#	@rm -fr $(PKGNAME)
#	$(PYTHONEXE) $(PYSTE) $(INCS) $(BPLINCS) --module=$(PKGNAME) --multiple $(PYSTETARGETS)
#	@$(PYTHONEXE) -c 'import os, string; \
#	[os.rename(x[0], x[1]) for x in zip(string.split("$(GENERATEDPYSTECPPS)"), string.split("$(PYSTECPPS)"))]'
#	@rm -fr $(PKGNAME)

#%.o:	%.pyste
#	@rm -fr .$(PKGNAME)
#	$(PYTHONEXE) $(PYSTE) $(INCS) $(BPLINCS) --module=$(PKGNAME) --multiple --out=.$(PKGNAME) $(PYSTETARGETS)
#	$(MPICXX) $(MPICXXFLAGS) $(INCS) $(BPLINCS) $(CXXFLAGS) $(PYOPT) $(EXTRAFLAGS) -I. -c .$(PKGNAME)/_$*.cpp -o $*.o

#.$(PKGNAME)/%.cpp:  %.pyste
#	$(SHELL) -ec 'if ! test -a $(LASTPYSTEMAKE); then \
#        export PATH=$(SPHERALDIR)/bin:$$PATH; \
#	$(PYTHONEXE) $(PYSTE) $(INCS) $(BPLINCS) --module=$(PKGNAME) --multiple --out=.$(PKGNAME) $(PYSTETARGETS); \
#	touch $(LASTPYSTEMAKE); fi'
#	mv .$(PKGNAME)/_$*.cpp .$(PKGNAME)/$*.cpp

%.o:	.$(PKGNAME)/%.cpp
	$(MPICXX) $(MPICXXFLAGS) $(INCS) $(BPLINCS) $(CXXFLAGS) $(PYOPT) $(EXTRAFLAGS) -I. -c .$(PKGNAME)/$*.cpp -o $*.o

%.o:	%.cpp
	$(MPICXX) $(MPICXXFLAGS) $(INCS) $(BPLINCS) $(CXXFLAGS) $(PYOPT) $(EXTRAFLAGS) -I. -c $< -o $*.o

%.o:	%.C
	$(MPICXX) $(MPICXXFLAGS) $(INCS) $(EXTRAINCLUDES) $(CXXFLAGS) $(PYOPT) $(EXTRAFLAGS) -I. -c $< -o $*.o

# Machine dependent rules for generating dependency files.
include $(SRCTOP)/helpers/@DEPENDRULES@

.INTERMEDIATE:	Methods.cc
.DELETE_ON_ERROR: Methods.cc

#-------------------------------------------------------------------------------
ifneq "$(SRCTARGETS)" ""
-include $(SRCTARGETS:.cc=.d)
endif

#ifneq "$(F77TARGETS)" ""
#-include $(F77TARGETS:.f=.d)
#endif

ifneq "$(BPLTARGETS)" "" 
-include $(BPLTARGETS:.cpp=.d)
endif

ifneq "$(PYSTETARGETS)" "" 
-include $(PYSTETARGETS:.pyste=.d)
endif

ifneq "$(PYFFLETARGETS)" ""
-include $(PYFFLETARGETS:.pw=.d)
endif

ifneq "$(PBGTARGET)" ""
-include $(PBGTARGET:.py=.py.d)
#-include $(PBGTARGET:.py=.d)
endif

#-------------------------------------------------------------------------------
$(LIBTARGET): $(OBJS) $(PYFFLEOBJS) $(EXETARGETS)
	@echo "################################################################################"
	@echo "# Building library $(LIBTARGET)"
	@echo "################################################################################"
	@mkdir -p $(LIBDIR)
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(OPTFLAGS) $(DYNLIBFLAG) $(EXTRAINCLUDES) -o $(LIBTARGET) $(OBJS) $(PYFFLEOBJS) $(LDFLAGS) $(LIBS) $(EXTRALIBS) $(DEPENDLIBS) $(LIBTARGETFLAGS)
	cp -f $(LIBTARGET) $(LIBDIR)

#-------------------------------------------------------------------------------
$(THIRDPARTYLIBTARGET): $(OBJS) $(PYFFLEOBJS) $(EXETARGETS)
	@echo "################################################################################"
	@echo "# Building library $(THIRDPARTYLIBTARGET)"
	@echo "################################################################################"
	@mkdir -p $(THIRDPARTYLIBDIR)
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(OPTFLAGS) $(DYNLIBFLAG) $(EXTRAINCLUDES) -o $(THIRDPARTYLIBTARGET) $(OBJS) $(PYFFLEOBJS) $(LDFLAGS) $(LIBS) $(EXTRALIBS) $(DEPENDLIBS) 
	cp -f $(THIRDPARTYLIBTARGET) $(THIRDPARTYLIBDIR)

#-------------------------------------------------------------------------------
$(INCTARGETS): force_build
	@echo "################################################################################"
	@echo "# Building include targets $(INCTARGETS)"
	@echo "################################################################################"
	cp -f $(INCTARGETS) $(THIRDPARTYINCDIR)

#-------------------------------------------------------------------------------
$(PYSTEDATE): $(PYSTETARGETS)
	@echo "################################################################################"
	@echo "# Generating Boost.Python source for $(MODTARGET)"
	@echo "################################################################################"
	$(SHELL) -ec 'export PATH=$(SPHERALDIR)/bin:$$PATH; \
	env GCCXML_COMPILER=$(GCCXMLCXX) $(PYTHONEXE) $(PYSTE) $(INCS) $(BPLINCS) --module=$(PKGNAME) --multiple --out=.$(PKGNAME) $(PYSTETARGETS); \
	for f in $(PYSTEBASES); do \
	mv .$(PKGNAME)/_$$f.cpp .$(PKGNAME)/$$f.cpp; \
	done'
	touch $(PYSTEDATE)

$(MODTARGET): $(BPLOBJS) $(OBJS) $(PYSTEDATE)
	@echo "################################################################################"
	@echo "# Building module $(MODTARGET)"
	@echo "################################################################################"
	mkdir -p $(LIBDIR)
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(PYOPT) $(SHAREDFLAG) $(EXTRAINCLUDES) -o $(MODTARGET) $(PYSTEOBJS) $(BPLOBJS) .$(PKGNAME)/_main.o $(OBJS) $(MODULELINK) $(LDFLAGS) $(LIBS) $(EXTRALIBS) $(DEPENDLIBS) 
	cp -f $(MODTARGET) $(LIBDIR)

#-------------------------------------------------------------------------------
$(BPLMODTARGET): $(BPLOBJS) $(OBJS)
	@echo "################################################################################"
	@echo "# Building module $(BPLMODTARGET)"
	@echo "################################################################################"
	mkdir -p $(LIBDIR)
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(PYOPT) $(SHAREDFLAG) $(EXTRAINCLUDES) -o $(BPLMODTARGET) $(BPLOBJS) $(OBJS) $(MODULELINK) $(LDFLAGS) $(LIBS) $(EXTRALIBS) $(DEPENDLIBS) 
	cp -f $(BPLMODTARGET) $(LIBDIR)

#-------------------------------------------------------------------------------
$(PBGTARGETDATE):  $(PBGTARGET)
	@echo "################################################################################"
	@echo "# Building sources $(PBGTARGET) $(PBGSRCS)"
	@echo "################################################################################"
	$(PYTHONEXE) $(PBGTARGET) $(SPHERALMODULES).C
	cp -f $(SPHERALMODULES).hh $(THIRDPARTYINCDIR)
	touch $(PBGTARGETDATE)

$(PBGSRCS):	$(PBGTARGETDATE)

$(PBGOBJS):	$(PBGSRCS)

$(PBGMODTARGET): $(PBGOBJS)
	@echo "################################################################################"
	@echo "# Building module $(PBGMODTARGET)"
	@echo "################################################################################"
	mkdir -p $(LIBDIR)
	$(MPICXX) $(MPICXXFLAGS) $(INCS) $(EXTRAINCLUDES) $(CXXFLAGS) $(PYOPT) $(EXTRAFLAGS) -I. -c $(SPHERALMODULES).C -o $(SPHERALMODULES).o
	$(MPICXX) $(MPICXXFLAGS) $(CXXFLAGS) $(PYOPT) $(SHAREDFLAG) $(EXTRAINCLUDES) -o $(PBGMODTARGET) $(PBGOBJS) $(PBGMODOBJ) $(OBJS) $(MODULELINK) $(LDFLAGS) $(LIBS) $(EXTRALIBS) $(DEPENDLIBS) 
	cp -f $(PBGMODTARGET) $(LIBDIR)

#-------------------------------------------------------------------------------
$(LINKLIST):	$(OBJS)
	rm -fr $(LINKLIST)
	$(PYTHONEXE) $(SRCTOP)/helpers/prepend_dir.py -c "prepend('$(LIBTARGET)', '$(PKGDIR)')" > $(LINKLIST)

#-------------------------------------------------------------------------------
$(PYTHONTARGETS):	$(PYTHONDATEFILE)
	@mkdir -p $(LIBDIR)
	rm -f $(LIBDIR)/$*.py
	cp -f $*.py $(LIBDIR)
	chmod 644 $(LIBDIR)/$*.py

#-------------------------------------------------------------------------------
$(PYTHONDATEFILE):

#-------------------------------------------------------------------------------
docs:
	pushd $(SRCTOP) && doxygen spheral.doxygen && popd

#-------------------------------------------------------------------------------
clean:
	rm -fr $(LIBTARGET) $(MODTARGET) $(PBGMODTARGET) $(EXETARGETS) $(OBJS) $(BPLOBJS) $(LINKLIST) $(SRCTARGETS:.cc=.d) $(F77TARGETS:.f=.d) $(PYSTETARGETS:.pyste=.d) $(PBGTARGETDATE) $(PBGSRCS) $(PBGOBJS) $(PBGMODSRCS) $(PBGMODOBJ) $(PYSTEOBJS) $(PYSTECPPS) $(LASTPYSTEMAKE) .$(PKGNAME) .MethodsSource ti_files $(PYTHONDATEFILE) $(PYSTEDATE) $(PYSTEDEPENDDATE) $(PYSTEOBJSDATE) .InterfaceOrder $(PBGTARGETS:.py=.C) $(PBGTARGET:.py=.py.d)

#-------------------------------------------------------------------------------
spotless:
	make clean
	rm -fr *.so *.dylib *.o *.d *.imp *.exp *Methods.cc .MethodsSource *~

#-------------------------------------------------------------------------------
install: all $(LIBTARGET) $(LIBDIR)

#-------------------------------------------------------------------------------
ifneq "@POSTGRES@" ""
dbinstall:
	sh postgres/createSpheral.sql

dbclean:
	sh postgres/destroySpheral.sql
else
dbinstall:

dbclean:

endif

