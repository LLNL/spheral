# -*-makefile-*-
# Spheral++ thirdPartyLibs package makefile
#-------------------------------------------------------------------------------
srcdir = @abs_srcdir@
VPATH = @abs_srcdir@

SPHERALTOP = @abs_top_srcdir@
BUILDTOP = @abs_top_builddir@

#-------------------------------------------------------------------------------
# For now suspend parallel building 'cause we're having trouble with stuff
# building multiple times and stomping on one and other.
.NOTPARALLEL:

#-------------------------------------------------------------------------------
# Include the master file to get compilers and such.
include $(BUILDTOP)/helpers/makefile_master

GZIP = gzip
BZIP2 = bzip2
UNZIP = unzip
TAR = tar
CP = cp
MV = mv
PATCH = patch
MKDIR = mkdir -p
CURL = curl -k -L
AR = ar
OPENPAREN:=(
CLOSEPAREN:=)
SAFEPATH = $(prefix)/bin:$(subst $(OPENPAREN),\$(OPENPAREN),$(subst $(CLOSEPAREN),\$(CLOSEPAREN),$(PATH)))

#-------------------------------------------------------------------------------
# Targets.
#-------------------------------------------------------------------------------
# Python
PYTHONDIST = Python-2.7.14.tgz
PYTHONURL = http://www.python.org/ftp/python/2.7.14/$(PYTHONDIST)
PYTHONDIR = $(PYTHONDIST:.tgz=)
PYTHONBUILDDATE = $(patsubst %.tgz, .%.date, $(PYTHONDIST))
PYTHONTARGET = @PYTHONTARGET@

# PIP
PIPDIST = pip-9.0.1-py2.py3-none-any.whl 
SETUPTOOLSDIST = setuptools-38.4.0-py2.py3-none-any.whl
WHEELDIST = wheel-0.30.0-py2.py3-none-any.whl
PIPURL = https://pypi.python.org/packages/b6/ac/7015eb97dc749283ffdec1c3a88ddb8ae03b8fad0f0e611408f196358da3/pip-9.0.1-py2.py3-none-any.whl#md5=297dbd16ef53bcef0447d245815f5144
SETUPTOOLSURL = https://pypi.python.org/packages/75/d1/5abca4ccf61a7ab86c255dd315fb96e566fbf9b5d3a480e72c93e8ec2802/setuptools-38.4.0-py2.py3-none-any.whl#md5=a5c6620a59f19f2d5d32bdca18c7b47e
WHEELURL = https://pypi.python.org/packages/0c/80/16a85b47702a1f47a63c104c91abdd0a6704ee8ae3b4ce4afc49bc39f9d9/wheel-0.30.0-py2.py3-none-any.whl#md5=1d61793f816d6b60513364fe2de9c1b3
PIPEXE = $(prefix)/bin/pip

# Pybindgen
PYBINDGENBUILDDATE=.pybindgen==0.17.0_pip_install.date
PYBINDGENPATCHDATE=.pybindgen_patch.date

# pybind11
PYBIND11DIST = pybind11-2.2.1.tar.gz
PYBIND11URL = https://github.com/pybind/pybind11/archive/v2.2.1.tar.gz
PYBIND11DIR = $(PYBIND11DIST:.tar.gz=)
PYBIND11BUILDDATE = $(patsubst %.tar.gz, .%.date, $(PYBIND11DIST))

# PyGnuplot
GNUPLOTDIST = gnuplot-py-1.8.tar.gz
GNUPLOTURL = http://downloads.sourceforge.net/gnuplot-py/gnuplot-py-1.8.tar.gz?modtime=1209767882&big_mirror=0
GNUPLOTDIR = $(GNUPLOTDIST:.tar.gz=)
GNUPLOTBUILDDATE = $(patsubst %.tar.gz, .%.date, $(GNUPLOTDIST))

# Psyco python accelerator.
PSYCOURL = http://wyvern.cs.uni-duesseldorf.de/psyco/psyco-snapshot.tar.gz
PSYCODIR = codespeak.net
PSYCOBUILDDIR = $(PYSCODIR)/svn/psyco/dist
PSYCOBUILDDATE = .psyco.date

# # Element tree
# ELEMENTTREEDIST = elementtree-1.2.7-20070827-preview.zip
# ELEMENTTREEURL = http://effbot.org/media/downloads/$(ELEMENTTREEDIST)
# ELEMENTTREEDIR = $(ELEMENTTREEDIST:.zip=)
# ELEMENTTREEBUILDDATE = $(patsubst %.zip, .%.date, $(ELEMENTTREEDIST))

# Boost
BOOSTDIST = boost_1_63_0.tar.bz2
BOOSTURL = http://sourceforge.net/projects/boost/files/boost/1.63.0/$(BOOSTDIST)/download
BOOSTDIR = $(BOOSTDIST:.tar.bz2=)
BOOSTDATE = $(patsubst %.tar.bz2, .%.date, $(BOOSTDIST))
BOOSTPYTHONLIB0 = libboost_python$(BOOSTEXT).$(DYLIBEXT)
BOOSTPYTHONLIB = libboost_python.$(DYLIBEXT)
BOOSTTARGET = @BOOSTTARGET@

# Cmake
CMAKEEXE = @CMAKEEXE@
CMAKEDIST = cmake-3.9.4.tar.gz
CMAKEURL = http://www.cmake.org/files/v3.9/$(CMAKEDIST)
CMAKEDIR = $(CMAKEDIST:.tar.gz=)

# Parmetis
PARMETISDIST = parmetis-4.0.3.tar.gz
PARMETISURL = http://glaros.dtc.umn.edu/gkhome/fetch/sw/parmetis/$(PARMETISDIST)
PARMETISDIR = $(PARMETISDIST:.tar.gz=)
PARMETISBUILDDATE = $(patsubst %.tar.gz, .%.date, $(PARMETISDIST))
#PARMETISMAKEFILE = Makefile.ParMETIS

# Tau
TAUDIST = tau-$(TAUVERSION).tar.gz
TAUURL=http://www.cs.uoregon.edu/Research/tau/tau_releases/$(TAUDIST)
#TAUURL=http://tau.uoregon.edu/tau.tgz
TAUDIR = $(TAUDIST:.tar.gz=)
TAUBUILDDATE = $(patsubst %.tar.gz, .%.date, $(TAUDIST))
TAUDUMMYDATE = $(patsubst %.tar.gz, .%.dummydate, $(TAUDIST))

# F2PY
# F2PYDIST = F2PY-2.45.241_1926.tar.gz
# F2PYDIR = $(F2PYDIST:.tar.gz=)
# F2PYBUILDDATE = $(patsubst %.tar.gz, .%.date, $(F2PYDIST))

# GNU scientific library (for special functions).
GSLDIST = gsl-1.14.tar.gz
GSLURL = http://ftp.gnu.org/gnu/gsl/$(GSLDIST)
GSLDIR = $(GSLDIST:.tar.gz=)
GSLBUILDDATE = $(patsubst %.tar.gz, .%.date, $(GSLDIST))
GSLLIBSO = libgsl.$(DYLIBEXT)
GSLLIBA = libgsl.a

# pygsl -- python interface to GNU scientific library
PYGSLDIST = pygsl-0.9.5.tar.gz
PYGSLURL = http://sourceforge.net/projects/pygsl/files/pygsl/pygsl-0.9.5/$(PYGSLDIST)/download
PYGSLDIR = $(PYGSLDIST:.tar.gz=)
PYGSLBUILDDATE = $(patsubst %.tar.gz, .%.date, $(PYGSLDIST))

# PETSc linear solver library.
PETSCURL = ftp://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-lite-2.3.3-p8.tar.gz
PETSCDIST = petsc-2.3.3-p8.tar.gz
PETSCBUILDDATE = $(patsubst %.tar.gz, .%.date, $(PETSCDIST))

# petsc4py
PETSC4PYDIST = petsc4py-0.7.5.tar.gz
PETSC4PYURL = https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/petsc4py/$(PETSC4PYDIST)
PETSC4PYDIR = $(PETSC4PYDIST:.tar.gz=)
PETSC4PYBUILDDATE = $(patsubst %.tar.gz, .%.date, $(PETSC4PYDIST))

# Google hash_map.
HASHMAPDIST = sparsehash-1.1.tar.gz
HASHMAPURL = https://github.com/sparsehash/sparsehash/archive/$(HASHMAPDIST)
HASHMAPDIR = $(HASHMAPDIST:.tar.gz=)
HASHMAPBUILDDATE = $(patsubst %.tar.gz, .%.date, $(HASHMAPDIST))

# Visit writer software from Hank.
VISITWRITERDIST = visit_writer.tar.gz
VISITWRITERURL = http://sourceforge.net/projects/spheral/files/ThirdPartySources/$(VISITWRITERDIST)/download
VISITWRITERDIR = $(VISITWRITERDIST:.tar.gz=)
VISITWRITERBUILDDATE = $(patsubst %.tar.gz, .%.date, $(VISITWRITERDIST))

# ATS testing system.
ATSDIST = ats-5.2.tar.gz
ATSURL = https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/ats/$(ATSDIST)
ATSDIR = $(ATSDIST:.tar.gz=)
ATSBUILDDATE = $(patsubst %.tar.gz, .%.date, $(ATSDIST))

# FFTW
FFTWDIST = fftw-3.3.tar.gz
FFTWURL = http://www.fftw.org/$(FFTWDIST)
FFTWDIR = $(FFTWDIST:.tar.gz=)
FFTWBUILDDATE = $(patsubst %.tar.gz, .%.date, $(FFTWDIST))

# FFTW++
FFTWPPDIST = fftw++-1.09.tar.gz
FFTWPPURL = http://sourceforge.net/projects/fftwpp/files/$(FFTWPPDIST)/download
FFTWPPDIR = $(FFTWPPDIST:.tar.gz=)
FFTWPPBUILDDATE = $(patsubst %.tar.gz, .%.date, $(FFTWPPDIST))

# Array
ARRAYDIST = Array.h
ARRAYURL = http://www.math.ualberta.ca/~bowman/$(ARRAYDIST)
ARRAYBUILDDATE = $(patsubst %.h, .%.date, $(ARRAYDIST))

# ZLIB
ZLIBDIST = zlib-1.2.11.tar.gz
ZLIBURL = http://zlib.net/$(ZLIBDIST)
ZLIBDIR = $(ZLIBDIST:.tar.gz=)
ZLIBBUILDDATE = $(patsubst %.tar.gz, .%.date, $(ZLIBDIST))

# JPEG
JPEGDIST = jpegsrc.v8d.tar.gz
JPEGURL = http://www.ijg.org/files/$(JPEGDIST)
JPEGDIR = jpeg-8d
JPEGBUILDDATE = $(patsubst %.tar.gz, .%.date, $(JPEGDIST))

# WildMagic
WILDMAGICDIST = WildMagic5p9.zip
WILDMAGICURL = http://sourceforge.net/projects/spheral/files/ThirdPartySources/$(WILDMAGICDIST)/download
WILDMAGICDIR = GeometricTools
WILDMAGICBUILDDATE = $(patsubst %.zip, .%.date, $(WILDMAGICDIST))

# Qhull
QHULLDIST = qhull-2015-src-7.2.0.tgz
QHULLURL = http://www.qhull.org/download/$(QHULLDIST)
QHULLDIR = qhull-2015.2
QHULLINCDIR = $(prefix)/include/qhull
QHULLDATE = $(patsubst %.tgz, .%.date, $(QHULLDIST))

# HDF5
HDF5DIST = hdf5-1.8.19.tar.bz2
HDF5URL = https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8/hdf5-1.8.19/src/$(HDF5DIST)
HDF5DIR = $(HDF5DIST:.tar.bz2=)
HDF5BUILDDATE = $(patsubst %.tar.bz2, .%.date, $(HDF5DIST))

# SILO
SILODIST = silo-4.10.2-bsd.tar.gz
SILOURL = https://wci.llnl.gov/content/assets/docs/simulation/computer-codes/silo/silo-4.10.2/$(SILODIST)
SILODIR = $(SILODIST:.tar.gz=)
SILOBUILDDATE = $(patsubst %.tar.gz, .%.date, $(SILODIST))
SILOTARGET = @SILOTARGET@

# Eigen
EIGENDIST = Eigen-3.3.4.tar.bz2
EIGENURL = http://bitbucket.org/eigen/eigen/get/3.3.4.tar.bz2
EIGENDIR = eigen-eigen-5a0156e40feb
EIGENBUILDDATE = .eigen.date

# GNU multiprecision library.
GMPDIST = gmp-5.0.2.tar.bz2
GMPURL = ftp://ftp.gmplib.org/pub/gmp-5.0.2/$(GMPDIST)
GMPDIR = $(GMPDIST:.tar.bz2=)
GMPBUILDDATE = $(patsubst %.tar.bz2, .%.date, $(GMPDIST))

# mpmath -- a python multiprecision math library
MPMATHDIST = mpmath-0.17.tar.gz
MPMATHURL = https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/mpmath/$(MPMATHDIST)
MPMATHDIR = $(MPMATHDIST:.tar.gz=)
MPMATHBUILDDATE = $(patsubst %.tar.gz, .%.date, $(MPMATHDIST))

# The FLANN (Fast Library for Approximate Nearest Neighbors) library.
FLANNDIST = flann-1.7.1-src.zip
FLANNURL = http://people.cs.ubc.ca/~mariusm/uploads/FLANN/$(FLANNDIST)
FLANNDIR = $(FLANNDIST:.zip=)
FLANNBUILDDATE = $(patsubst %.zip, .%.date, $(FLANNDIST))

# The Point Cloud Library (PCL)
PCLDIST = PCL-1.5.1-Source.tar.bz2
PCLURL = http://dev.pointclouds.org/attachments/download/771/$(PCLDIST)
PCLDIR = $(PCLDIST:.tar.bz2=)
PCLBUILDDATE = $(patsubst %.tar.bz2, .%.date, $(PCLDIST))

# HYPRE parallel linear solver
HYPREDIST = hypre-2.8.0b.tar.gz
HYPREURL = https://computation.llnl.gov/casc/hypre/download/$(HYPREDIST)
HYPREDIR = $(HYPREDIST:.tar.gz=)
HYPREBUILDDATE = $(patsubst %.tar.gz, .%.date, $(HYPREDIST))

# Triangle (needed by polytope)
TRIANGLEDIST = triangle.zip
TRIANGLEURL = http://www.netlib.org/voronoi/$(TRIANGLEDIST)
TRIANGLEDIR = $(TRIANGLEDIST:.zip=)

# Tetgen (needed by polytope)
TETGENDIST = tetgen1.4.3.tar.gz
TETGENURL = http://ftp.mcs.anl.gov/pub/petsc/externalpackages/$(TETGENDIST)
TETGENDIR = $(TETGENDIST:.tar.gz=)

# Polytope
POLYTOPEVER = 0.5.24
POLYTOPEDIST = polytope-$(POLYTOPEVER).tar.gz
POLYTOPEURL = https://bitbucket.org/jjphatt/polytope/downloads/$(POLYTOPEDIST)
POLYTOPEDIR = $(POLYTOPEDIST:.tar.gz=)
POLYTOPEBUILDDATE = $(patsubst %.tar.gz, .%.date, $(POLYTOPEDIST))

# OpenSubDiv
OPENSUBDIVDIST = OpenSubdiv-3_3_0.zip
OPENSUBDIVURL = https://github.com/PixarAnimationStudios/OpenSubdiv/archive/v3_3_0.zip
OPENSUBDIVDIR = $(OPENSUBDIVDIST:.zip=)
OPENSUBDIVBUILDDATE = $(patsubst %.zip, .%.date, $(OPENSUBDIVDIST))

# R3D
R3DDIST = r3d.zip
R3DURL = https://github.com/devonmpowell/r3d/archive/master.zip
R3DDIR = r3d-master
R3DBUILDDATE = $(patsubst %.zip, .%.date, $(R3DDIST))
R3DINCDIR = $(prefix)/include/r3d

# easy_profile
EASYPROFILEDIST = easyprofile-v1.3.0.tar.gz
EASYPROFILEURL = https://github.com/yse/easy_profiler/archive/v1.3.0.tar.gz
EASYPROFILEDIR = easy_profiler-1.3.0
EASYPROFILEBUILDDATE = $(patsubst %.tar.gz, .%.date, $(EASYPROFILEDIST))

#-------------------------------------------------------------------------------
# Define patterns for downloading and installing pip packages
.SUFFIXES:	_pip_dowload.date _pip_install.date

.%_pip_download.date:	$(PIPEXE)
	@echo "################################################################################"
	@echo "# Downloading $*"
	@echo "################################################################################"
	$(PIPEXE) wheel -w cache $*
	#$(PIPEXE) download -d cache $*
	touch $@

.%_pip_install.date:	$(PIPEXE) .%_pip_download.date
	@echo "################################################################################"
	@echo "# Building $*"
	@echo "################################################################################"
	$(eval PIPMOD := $(firstword $(subst ==, ,$*)))
	$(PIPEXE) install --upgrade $* --no-index --find-links cache
	@if test -n "`$(PYTHONEXE) -c 'import $(PIPMOD)'`"; then \
	echo "ERROR building $*."; \
	rm -f $@; \
	exit 1; \
	fi
	touch $@

# This rule is intended to make sure we build the pip targets serially to make
# pip downloading and using prerequisites reliable.
piptargets:
	$(MAKE) MAKEFLAGS='-j 1' $(PIPTARGETS)

#-------------------------------------------------------------------------------
# Pybindgen needs to be patched to handle C++ enums.
$(PYBINDGENPATCHDATE):	$(PYBINDGENBUILDDATE)
	$(PATCH) $(PYLIBDIR)/pybindgen/enum.py $(srcdir)/pybindgen_enum_py.patch
	touch $(PYBINDGENPATCHDATE)

#-------------------------------------------------------------------------------
all:	$(PYTHONTARGET) \
	$(PYBINDGENPATCHDATE) \
	$(PETSCTARGETS) \
	$(ATSBUILDDATE) \
	$(OPENSUBDIVTARGETS) \
	$(PYBIND11BUILDDATE) \
	$(EXTRATHIRDPARTYTARGETS) \
	piptargets
#	$(HYPREBUILDDATE)
#	$(FLANNBUILDDATE) \
#	$(PCLBUILDDATE)

clean:
	rm -fr $(PYTHONDIR) $(PYTHONBUILDDATE) 	\
	       $(GNUPLOTDIR) $(GNUPLOTBUILDDATE) \
	       $(PSYCODIR) $(PSYCOBUILDDATE) \
	       $(BOOSTDIR) $(BOOSTDATE) \
	       $(PYBIND11BUILDDATE) \
	       $(CMAKEDIR) \
	       $(PSYCODIR) \
	       $(PARMETISDIR) $(PARMETISBUILDDATE) \
	       $(GSLDIR) \
	       $(PYGSLDIR) \
	       $(HASHMAPDATE) \
	       $(VISITWRITERDIR) $(VISITWRITERBUILDDATE) \
	       $(ATSWRITERDIR) $(ATSWRITERBUILDDATE) \
	       $(FFTWDIR) $(FFTWBUILDDATE) \
	       $(FFTWPPDIR) $(FFTWPPBUILDDATE) \
	       $(ARRAYDIR) $(ARRAYBUILDDATE) \
	       $(ZLIBDIR) $(ZLIBBUILDDATE) \
	       $(QHULLDIR) $(QHULLDATE) \
	       $(HDF5DIR) $(HDF5BUILDDATE) \
	       $(SILODIR) $(SILOBUILDDATE) \
	       $(EIGENDIR) $(EIGENBUILDDATE) \
	       $(MPMATHDIR) $(MPMATHBUILDDATE) \
	       $(POLYTOPEDIR) $(POLYTOPEBUILDDATE) \
	       $(HYPREDIR) $(HYPREBUILDDATE) \
	       $(FLANNDIR) $(FLANNBUILDDATE) \
	       $(PCLDIR) $(PCLBUILDDATE) \
	       $(OPENSUBDIVDIR) $(OPENSUBDIVBUILDDATE) \
	       $(R3DDIR) $(R3DBUILDDATE) \
	       $(EXTRATHIRDPARTYTARGETS) \
	       .*.date

.SUFFIXES:	.date .gz .tgz

#-------------------------------------------------------------------------------
# Python
#-------------------------------------------------------------------------------
cache/$(PYTHONDIST):
	@$(MKDIR) cache
	$(CURL) "$(PYTHONURL)" -o cache/$(PYTHONDIST)

$(PYTHONBUILDDATE):	$(PYTHON) cache/$(PYTHONDIST) $(ZLIBBUILDDATE)
	@echo "################################################################################"
	@echo "# Building $(PYTHONDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(PYTHONDIR)
	$(GZIP) -dc cache/$(PYTHONDIST) | $(TAR) -xf -
	# if test "$(OSNAME)" = "Darwin"; then \
	# $(PATCH) $(PYTHONDIR)/configure $(srcdir)/Python-2.7.11.configure.patch; \
	# fi
	$(PATCH) $(PYTHONDIR)/Modules/_ctypes/libffi/src/powerpc/linux64.S $(srcdir)/Python-2.7.13_linux64.S.patch
	$(PATCH) $(PYTHONDIR)/Modules/_ctypes/libffi/src/powerpc/linux64_closure.S $(srcdir)/Python-2.7.13_linux64_closure.S.patch
	$(SHELL) -ec "cd $(PYTHONDIR); \
	env PATH=$(SAFEPATH) CONFIG_SHELL=$(CONFIG_SHELL) CC='$(PYTHONCC)' CXX='$(PYTHONCXX)' CFLAGS='$(PYTHONCFLAGS)' LDFLAGS='$(LDFLAGS)' HAS_HG=no ./configure --disable-ipv6 --with-gcc='$(PYTHONCC)' --with-cxx-main=$(PYTHONCXX) $(PYTHONCONFFLAGS) --prefix=$(prefix)"
	$(MAKE) -C $(PYTHONDIR) CC='$(PYTHONCC)' CXX='$(PYTHONCXX)' CFLAGS='$(PYTHONCFLAGS)' LDFLAGS='$(LDFLAGS)'
	$(MAKE) -C $(PYTHONDIR) install
	@if ! test -e $(PYTHONEXE); then \
	echo "ERROR building local python distribution."; \
	rm -f $(PYTHONBUILDDATE); \
	exit 1; \
	fi
	$(SPHERALTOP)/helpers/runexecstack $(PYTHONEXE)
	rm -fr $(PYTHONDIR)
	touch $(PYTHONBUILDDATE)

#-------------------------------------------------------------------------------
# PIP
#-------------------------------------------------------------------------------
cache/$(PIPDIST):
	@$(MKDIR) cache
	$(CURL) "$(PIPURL)" -o cache/$(PIPDIST)
	$(CURL) "$(SETUPTOOLSURL)" -o cache/$(SETUPTOOLSDIST)
	$(CURL) "$(WHEELURL)" -o cache/$(WHEELDIST)

$(PIPEXE):	$(PYTHONTARGET) cache/$(PIPDIST)
	@echo "################################################################################"
	@echo "# Building PIP"
	@echo "################################################################################"
	$(PYTHONEXE) cache/$(patsubst %,%/pip,$(PIPDIST)) install --no-index cache/$(PIPDIST)
	$(PYTHONEXE) -m pip install --upgrade setuptools wheel --no-index --find-links cache
	@if test -n "`$(PYTHONEXE) -c 'import pip'`" -a \
	         -e $(PIPEXE); then \
	echo "ERROR building PIP."; \
	exit 1; \
	fi

#-------------------------------------------------------------------------------
# Gnuplot python extension
#-------------------------------------------------------------------------------
cache/$(GNUPLOTDIST):
	@$(MKDIR) cache
	$(CURL) "$(GNUPLOTURL)" -o cache/$(GNUPLOTDIST)

$(GNUPLOTBUILDDATE):	$(PYTHONTARGET) cache/$(GNUPLOTDIST) .numpy_pip_install.date $(NUMPYBUILDDATE)
	@echo "################################################################################"
	@echo "# Building $(GNUPLOTDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(GNUPLOTDIR)
	$(GZIP) -dc cache/$(GNUPLOTDIST) | $(TAR) -xf -
	$(SHELL) -ec 'cd $(GNUPLOTDIR); $(PYTHONEXE) setup.py install --prefix $(prefix);'
	@if test -n "`$(PYTHONEXE) -c 'import Gnuplot'`"; then \
	echo "ERROR building Gnuplot python extension."; \
	rm -f $(GNUPLOTBUILDDATE); \
	exit 1; \
	fi
	rm -fr $(GNUPLOTDIR)
	touch $(GNUPLOTBUILDDATE)

#-------------------------------------------------------------------------------
# Boost
#-------------------------------------------------------------------------------
cache/$(BOOSTDIST):
	@$(MKDIR) cache
	$(CURL) "$(BOOSTURL)" -o cache/$(BOOSTDIST)

$(BOOSTDATE):	cache/$(BOOSTDIST)
	@echo "################################################################################"
	@echo "# Building $(BOOSTDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(BOOSTDIR)
	$(BZIP2) -dc cache/$(BOOSTDIST) | $(TAR) -xf -
	$(SHELL) -ec 'cd $(BOOSTDIR); \
	PATH=$(SAFEPATH); export PATH; \
	./bootstrap.sh --with-toolset=$(JAMTOOLSET)  --without-libraries=atomic,container,coroutine,coroutine2,log,chrono,context,date_time,exception,fiber,filesystem,graph,graph_parallel,iostreams,locale,math,metaparse,mpi,program_options,python,random,regex,serialization,signals,system,test,thread,timer,type_erasure,wave --prefix=$(prefix); \
	./b2 install'
	@if ! test -e "$(prefix)/include/boost" ; then \
	echo "ERROR building local boost distribution. (0, no include dir)"; \
	rm -f $(BOOSTDATE); \
	exit 1; \
	fi
	@if test "$(BOOSTPYTHONTARGET)" = "python" -a ! -e $(prefix)/lib/$(BOOSTPYTHONLIB0) ; then \
	echo "ERROR building local boost distribution. (0, no $(BOOSTPYTHONLIB0))"; \
	rm -f $(BOOSTDATE); \
	exit 1; \
	fi
	@if test "$(BOOSTPYTHONTARGET)" = "python"; then \
	rm -f $(LIBDIR)/$(BOOSTPYTHONLIB) $(prefix)/include/boost; \
	ln -s $(prefix)/lib/$(BOOSTPYTHONLIB0) $(LIBDIR)/$(BOOSTPYTHONLIB); \
	fi
	@if test "$(BOOSTPYTHONTARGET)" = "python" -a ! -e $(LIBDIR)/$(BOOSTPYTHONLIB); then \
	echo "ERROR building local boost distribution. (2)"; \
	rm -f $(BOOSTDATE); \
	exit 1; \
	fi
	rm -fr $(BOOSTDIR)
	touch $(BOOSTDATE)

#-------------------------------------------------------------------------------
# Cmake
#-------------------------------------------------------------------------------
cache/$(CMAKEDIST):
	@$(MKDIR) cache
	$(CURL) "$(CMAKEURL)" -o cache/$(CMAKEDIST)

$(CMAKEEXE):	cache/$(CMAKEDIST)
	@echo "################################################################################"
	@echo "# Building $(CMAKEDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(CMAKEDIR)
	$(GZIP) -dc cache/$(CMAKEDIST) | $(TAR) -xf -
	$(SHELL) -ec 'cd $(CMAKEDIR); \
	env PATH=$(SAFEPATH) CC='$(CMAKECC)' CXX='$(CMAKECXX)' ./bootstrap --prefix=$(prefix); \
	$(MAKE); \
	$(MAKE) install'
	@if ! test -e $(CMAKEEXE); then \
	echo "ERROR building cmake."; \
	exit 1; \
	fi
	rm -fr $(CMAKEDIR)

#-------------------------------------------------------------------------------
# ParMETIS
#-------------------------------------------------------------------------------
cache/$(PARMETISDIST):
	@$(MKDIR) cache
	$(CURL) "$(PARMETISURL)" -o cache/$(PARMETISDIST)

$(PARMETISBUILDDATE):  cache/$(PARMETISDIST) $(CMAKEEXE)
	@echo "################################################################################"
	@echo "# Building $(PARMETISDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(PARMETISDIR)
	$(GZIP) -dc cache/$(PARMETISDIST) | $(TAR) -xf -
	env PATH=$(SAFEPATH) CC="$(MPICC)" CXX="$(MPICXX)" CFLAGS='$(MPICCFLAGS)' CXXFLAGS='$(MPICXXFLAGS)' $(MAKE) -C $(PARMETISDIR) config shared=1 prefix=$(prefix) cc=$(MPICC) cxx=$(MPICXX)
	$(MAKE) MAKEFLAGS= -C $(PARMETISDIR) 
	$(MAKE) MAKEFLAGS= -C $(PARMETISDIR) install
	$(CP) -f $(PARMETISDIR)/metis/include/metis.h $(prefix)/include
	@if ! test -e $(prefix)/lib/libparmetis.$(DYLIBEXT) -a \
	           -e $(prefix)/include/parmetis.h -a \
	           -e $(prefix)/include/metis.h; then \
	echo "ERROR building ParMETIS."; \
	rm -f $(PARMETISBUILDDATE); \
	exit 1; \
	fi
	rm -fr $(PARMETISDIR)
	touch $(PARMETISBUILDDATE)

#-------------------------------------------------------------------------------
# Tau
#-------------------------------------------------------------------------------
cache/$(TAUDIST):
	@$(MKDIR) cache
	$(CURL) "$(TAUURL)" -o cache/$(TAUDIST)

$(TAUBUILDDATE):  cache/$(TAUDIST)
	@echo "################################################################################"
	@echo "# Building $(TAUDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(TAUDIR) $(TAUDUMMYDATE)
	$(GZIP) -dc cache/$(TAUDIST) | $(TAR) -xf -
	$(SHELL) -ec "cd $(TAUDIR); ./configure $(TAUCONFIGUREFLAGS)"
	$(SHELL) -ec "$(MAKE) $(AIXSHELL) -C $(TAUDIR) install"
	$(SHELL) -ec "cd $(TAUDIR); ln -s $(TAUARCH)/lib/Makefile.tau* Makefile.tau"
	touch $(TAUDIR)/include/TAU.h
	touch $(TAUBUILDDATE)

#-------------------------------------------------------------------------------
# Tau -- dummy (non-compiled) version.
#-------------------------------------------------------------------------------
$(TAUDUMMYDATE):  cache/$(TAUDIST)
	@echo "################################################################################"
	@echo "# Building $(TAUDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(TAUDIR) $(TAUBUILDDATE)
	$(GZIP) -dc cache/$(TAUDIST) | $(TAR) -xf -
	touch $(TAUDIR)/include/TAU.h
	touch $(TAUDUMMYDATE)

#-------------------------------------------------------------------------------
# GNU Scientific Library -- Needed for special functions.
#-------------------------------------------------------------------------------
cache/$(GSLDIST):
	@$(MKDIR) cache
	$(CURL) "$(GSLURL)" -o cache/$(GSLDIST)

$(GSLBUILDDATE): cache/$(GSLDIST)
	@echo "################################################################################"
	@echo "# Building $(GSLDIST) $(GSLBUILDDATE)" 
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(GSLDIR)
	$(GZIP) -dc cache/$(GSLDIST) | $(TAR) -xf -
	$(SHELL) -ec "cd $(GSLDIR); \
	env CC='$(CC)' CXX='$(CXX)' ./configure --prefix=$(prefix) ; \
	$(MAKE) ; \
	$(MAKE) install"
	@if ! test -e $(prefix)/lib/$(GSLLIBSO) -o \
	           -e $(prefix)/lib/$(GSLLIBA) ; then \
	echo "ERROR building GNU scientific library."; \
	rm -f $(GSLBUILDDATE); \
	exit 1; \
	fi
	rm -fr $(GSLDIR)
	touch $(GSLBUILDDATE)

#-------------------------------------------------------------------------------
# Python interface to GNU Scientific Library.
#-------------------------------------------------------------------------------
cache/$(PYGSLDIST):
	@$(MKDIR) cache
	$(CURL) "$(PYGSLURL)" -o cache/$(PYGSLDIST)

$(PYGSLBUILDDATE): cache/$(PYGSLDIST) $(GSLBUILDDATE) $(PYTHONTARGET)
	@echo "################################################################################"
	@echo "# Building $(PYGSLDIST) $(PYGSLBUILDDATE)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(PYGSLDIR)
	$(GZIP) -dc cache/$(PYGSLDIST) | $(TAR) -xf -
	env PATH=$(SAFEPATH) $(SHELL) -ec 'cd $(PYGSLDIR); $(PYTHONEXE) setup.py install --prefix $(prefix);'
	@if test -n "`$(PYTHONEXE) -c 'import pygsl'`"; then \
	echo "ERROR building pygsl extension."; \
	rm -f $(PYGSLBUILDDATE); \
	exit 1; \
	fi
	rm -fr $(PYGSLDIR)
	touch $(PYGSLBUILDDATE)

#-------------------------------------------------------------------------------
# PETSc linear solver library -- Needed for SPH Gravity and MHD packages.
#-------------------------------------------------------------------------------
cache/$(PETSCIDIST):
	@$(MKDIR) cache
	$(CURL) "$(PETSCURL)" -o cache/$(PETSCIDIST)

$(PETSCBUILDDATE):	cache/$(PETSCIDIST)
	@echo "################################################################################"
	@echo "# Fetching and building $(PETSCDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	@if ! test -e $(PETSC_DIR) ; then \
	$(MKDIR) $(PETSC_DIR); \
	fi
	@if ! test -e $(PETSC_DIR)/lib/$(PETSC_ARCH)/libpetsc.a ; then \
	$(SHELL) -ec "cd $(PETSC_DIR)/.. ; \
	$(GZIP) -dc $(BUILDTOP)/thirdPartyLibs/cache/$(PETSCDIST) | $(TAR) -xf - ; \
	cd $(PETSC_DIR); \
	$(PYTHONEXE) config/configure.py --prefix=$(SPHERALDIR) $(PETSCOPTS) ; \
	$(MAKE) ; \
	$(MAKE) test ; \
	$(MAKE) python ; \
	$(MAKE) install"; \
	fi
	touch $(PETSCBUILDDATE)

#-------------------------------------------------------------------------------
# petsc4py Python module -- used by SPHGravity and MHD.
#-------------------------------------------------------------------------------
cache/$(PETSC4PYDIST):
	@$(MKDIR) cache
	$(CURL) "$(PETSC4PYURL)" -o cache/$(PETSC4PYDIST)

$(PETSC4PYBUILDDATE): cache/$(PETSC4PYDIST)
	@echo "################################################################################"
	@echo "# Fetching and building $(PETSC4PYDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	$(GZIP) -dc cache/$(PETSC4PYDIST) | $(TAR) -xf -
#	$(PATCH) $(SCIPYDIR)/setup.py $(srcdir)/$(SCIPYDIR)-setup.py-patch 
	$(SHELL) -ec "cd $(PETSC4PYDIR); \
	env CC=$(srcdir)/helpers/mpicc $(PYTHONEXE) setup.py install --prefix $(prefix)"
	@if test -n "`$(PYTHONEXE) -c 'import petsc4py'`"; then \
	echo "ERROR building petsc4py extension."; \
	rm -f $(PETSC4PYBUILDDATE); \
	exit 1; \
	fi
	rm -fr $(PETSC4PYDIR)
	touch $(PETSC4PYBUILDDATE)

#-------------------------------------------------------------------------------
# Google's hash map implementation.
#-------------------------------------------------------------------------------
cache/$(HASHMAPDIST):
	@$(MKDIR) cache
	$(CURL) "$(HASHMAPURL)" -o cache/$(HASHMAPDIST)

$(HASHMAPBUILDDATE):	cache/$(HASHMAPDIST)
	@echo "################################################################################"
	@echo "# Building $(HASHMAPDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	$(GZIP) -dc cache/$(HASHMAPDIST) | $(TAR) -xf -
	$(SHELL) -ec "cd $(HASHMAPDIR); \
	env CC='$(CC)' CXX='$(CXX)' ./configure --enable-namespace=google --prefix=$(prefix); \
	$(MAKE); \
	$(MAKE) install"
	@if ! test -e $(prefix)/include/google; then \
	echo "ERROR building google hash_map."; \
	exit 1; \
	fi
	rm -fr $(HASHMAPBUILDDATE) $(HASHMAPDIR)
	touch $(HASHMAPBUILDDATE)

#-------------------------------------------------------------------------------
# Hank's visit_writer 
#-------------------------------------------------------------------------------
cache/$(VISITWRITERDIST):
	@$(MKDIR) cache
	$(CURL) "$(VISITWRITERURL)" -o cache/$(VISITWRITERDIST)

$(VISITWRITERBUILDDATE):  cache/$(VISITWRITERDIST)
	@echo "################################################################################"
	@echo "# Building $(VISITWRITERDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(VISITWRITEDIR)
	$(GZIP) -dc cache/$(VISITWRITERDIST) | $(TAR) -xf -
	$(SHELL) -ec "cd $(VISITWRITERDIR); $(MAKE) BUILDTOP=$(BUILDTOP) SPHERALTOP=$(SPHERALTOP) srcdir=$(BUILDTOP)/thirdPartyLibs/visit_writer"
	@if ! test -e $(prefix)/include/visit_writer.h -a \
	           -e $(prefix)/lib/libvisit_writer.$(DYLIBEXT); then \
	echo "ERROR building visit_writer."; \
	exit 1; \
	fi
	rm -fr $(VISITWRITERBUILDDATE) $(VISITWRITERDIR)
	touch $(VISITWRITERBUILDDATE)

#-------------------------------------------------------------------------------
# ATS testing system.
#-------------------------------------------------------------------------------
cache/$(ATSDIST):
	@$(MKDIR) cache
	$(CURL) "$(ATSURL)" -o cache/$(ATSDIST)

$(ATSBUILDDATE):	cache/$(ATSDIST) $(PYTHONTARGET)
	@echo "################################################################################"
	@echo "# Building $(ATSDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(ATSDIR)
	$(GZIP) -dc cache/$(ATSDIST) | $(TAR) -xf -
	$(SHELL) -ec 'cd $(ATSDIR); \
	$(PYTHONEXE) setup.py install --prefix $(prefix); \
	cd LC; \
	$(PYTHONEXE) setup.py install --prefix $(prefix)'
	@if ! test -e $(prefix)/bin/ats; then \
	echo "ERROR building ATS."; \
	rm -f $(ATSBUILDDATE); \
	exit 1; \
	fi
	rm -fr $(ATSDIR)
	touch $(ATSBUILDDATE)

#-------------------------------------------------------------------------------
# FFTW fast-fourier transform
#-------------------------------------------------------------------------------
cache/$(FFTWDIST):
	@$(MKDIR) cache
	$(CURL) "$(FFTWURL)" -o cache/$(FFTWDIST)

$(FFTWBUILDDATE):	cache/$(FFTWDIST)
	@echo "################################################################################"
	@echo "# Building $(FFTWDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(FFTWDIR)
	$(GZIP) -dc cache/$(FFTWDIST) | $(TAR) -xf -
	$(SHELL) -ec "cd $(FFTWDIR); \
	env CC='$(CC)' CXX='$(CXX)' CFLAGS='$(CFLAGS)' ./configure --prefix=$(prefix) ; \
	$(MAKE) ; \
	$(MAKE) install"
	@if ! test -e $(prefix)/include/fftw3.h -a \
	           -e $(prefix)/lib/libfftw3.a; then \
	echo "ERROR building FFTW."; \
	exit 1; \
	fi
	rm -fr $(FFTWBUILDDATE) $(FFTWDIR)
	touch $(FFTWBUILDDATE)

#-------------------------------------------------------------------------------
# ARRAY class for use in fftw++
#-------------------------------------------------------------------------------
cache/$(ARRAYDIST):
	@$(MKDIR) cache
	$(CURL) "$(ARRAYURL)" -o cache/$(ARRAYDIST)

$(ARRAYBUILDDATE):	cache/$(ARRAYDIST)
	@echo "################################################################################"
	@echo "# Building $(ARRAYDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	$(CP) -f cache/$(ARRAYDIST) $(prefix)/include
	@if ! test -e $(prefix)/include/$(ARRAYDIST); then \
	echo "ERROR building ARRAY."; \
	exit 1; \
	fi
	touch $(ARRAYBUILDDATE)

#-------------------------------------------------------------------------------
# FFTW++ interface
#-------------------------------------------------------------------------------
cache/$(FFTWPPDIST):
	@$(MKDIR) cache
	$(CURL) "$(FFTWPPURL)" -o cache/$(FFTWPPDIST)

$(FFTWPPBUILDDATE):	cache/$(FFTWPPDIST) $(ARRAYBUILDDATE)
	@echo "################################################################################"
	@echo "# Building $(FFTWPPDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(FFTWPPDIR)
	$(GZIP) -dc cache/$(FFTWPPDIST) | $(TAR) -xf -
	$(SHELL) -ec 'cd $(FFTWPPDIR); \
	$(CXX) $(CXXFLAGS) -c -o fftw++.o fftw++.cc; \
	$(AR) rcs libfftw++.a fftw++.o'
	$(CP) -f cache/$(FFTWPPDIR)/fftw++.h $(prefix)/include
	$(CP) -f cache/$(FFTWPPDIR)/libfftw++.a $(prefix)/lib
	@if ! test -e $(prefix)/include/fftw++.h -a \
	           -e $(prefix)/lib/libfftw++.a; then \
	echo "ERROR building FFTW++."; \
	exit 1; \
	fi
	rm -fr $(FFTWPPBUILDDATE) $(FFTWPPDIR)
	touch $(FFTWPPBUILDDATE)

#-------------------------------------------------------------------------------
# ZLIB
#-------------------------------------------------------------------------------
cache/$(ZLIBDIST):
	@$(MKDIR) cache
	$(CURL) "$(ZLIBURL)" -o cache/$(ZLIBDIST)

$(ZLIBBUILDDATE):	cache/$(ZLIBDIST)
	@echo "################################################################################"
	@echo "# Building $(ZLIBDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin $(prefix)/share/man/man3
	rm -fr $(ZLIBDIR)
	$(GZIP) -dc cache/$(ZLIBDIST) | $(TAR) -xf -
	$(SHELL) -ec "cd $(ZLIBDIR); \
	env CFLAGS='-fpic' ./configure --prefix=$(prefix) ; \
	$(MAKE) MAKEFLAGS='-j 1' ; \
	$(MAKE) MAKEFLAGS='-j 1' install"
	@if ! test -e $(prefix)/include/zlib.h -a \
	           -e $(prefix)/include/zconf.h -a \
	           -e $(prefix)/lib/libz.a; then \
	echo "ERROR building ZLIB."; \
	exit 1; \
	fi
	rm -fr $(ZLIBBUILDDATE) $(ZLIBDIR)
	touch $(ZLIBBUILDDATE)

#-------------------------------------------------------------------------------
# JPEG
#-------------------------------------------------------------------------------
cache/$(JPEGDIST):
	@$(MKDIR) cache
	$(CURL) "$(JPEGURL)" -o cache/$(JPEGDIST)

$(JPEGBUILDDATE):	cache/$(JPEGDIST)
	@echo "################################################################################"
	@echo "# Building $(JPEGDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(JPEGDIR)
	$(GZIP) -dc cache/$(JPEGDIST) | $(TAR) -xf -
	$(SHELL) -ec "cd $(JPEGDIR); \
	env CC='$(CC)' CXX='$(CXX)' CFLAGS="-fPIC" ./configure --prefix=$(prefix) ; \
	$(MAKE) ; \
	$(MAKE) install ; \
	$(CP) -f jpeglib.h jerror.h jconfig.h jmorecfg.h $(prefix)/include ; \
	$(CP) -f .libs/libjpeg.a $(prefix)/lib"
	@if ! test -e $(prefix)/include/jpeglib.h -a \
	           -e $(prefix)/include/jerror.h -a \
	           -e $(prefix)/include/jconfig.h -a \
	           -e $(prefix)/include/jmorecfg.h -a \
	           -e $(prefix)/lib/libjpeg.a; then \
	echo "ERROR building JPEG."; \
	exit 1; \
	fi
	rm -fr $(JPEGBUILDDATE) $(JPEGDIR)
	touch $(JPEGBUILDDATE)

#-------------------------------------------------------------------------------
# Qhull
#-------------------------------------------------------------------------------
cache/$(QHULLDIST):
	@$(MKDIR) cache
	$(CURL) "$(QHULLURL)" -o cache/$(QHULLDIST)

$(QHULLDATE):	$(PYTHONTARGET) $(CMAKEEXE) cache/$(QHULLDIST)
	@echo "################################################################################"
	@echo "# Building $(QHULLDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(QHULLDIR) $(QHULLINCDIR)
	@$(MKDIR) -p $(prefix)/bin $(prefix)/man $(prefix)/lib $(QHULLINCDIR)
	$(GZIP) -dc cache/$(QHULLDIST) | $(TAR) -xf -
	$(PATCH) $(QHULLDIR)/src/libqhull/qhull_a.h $(srcdir)/$(QHULLDIR)-qhull_a.h-patch
	$(PATCH) $(QHULLDIR)/src/libqhull_r/qhull_ra.h $(srcdir)/$(QHULLDIR)-qhull_ra.h-patch
	$(SHELL) -ec "cd $(QHULLDIR)/build; \
	env PATH=$(SAFEPATH) CC='$(CC)' CXX='$(CXX)' CFLAGS='$(CFLAGS)' LDFLAGS='$(LDFLAGS)' $(CMAKEEXE) -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX:PATH=$(prefix) .. ; \
	$(MAKE); \
	$(MAKE) install"
	@if ! test -e $(prefix)/lib/libqhullstatic.a; then \
	echo "ERROR building Qhull."; \
	rm -f $(QHULLDATE); \
	exit 1; \
	fi
	rm -fr $(QHULLDIR)
	touch $(QHULLDATE)

#-------------------------------------------------------------------------------
# HDF5
#-------------------------------------------------------------------------------
cache/$(HDF5DIST):
	@$(MKDIR) cache
	$(CURL) "$(HDF5URL)" -o cache/$(HDF5DIST)

$(HDF5BUILDDATE):  cache/$(HDF5DIST)
	@echo "################################################################################"
	@echo "# Building $(HDF5DIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(HDF5DIR)
	$(BZIP2) -dc cache/$(HDF5DIST) | $(TAR) -xf -
	$(PATCH) $(HDF5DIR)/bin/config.guess $(srcdir)/config.guess-hdf5-1.8.16.patch
	$(PATCH) $(HDF5DIR)/bin/config.sub $(srcdir)/config.sub-hdf5-1.8.16.patch
	$(SHELL) -ec "cd $(HDF5DIR); \
	env CC='$(CC)' CXX='$(CXX)' CFLAGS='$(CFLAGS)' CXXFLAGS='$(CXXFLAGS)' ./configure --prefix=$(prefix) $(HDF5FLAGS) ; \
	rm -f test.conf ; \
	$(MAKE) ; \
	$(MAKE) install"
	@if ! test -e $(prefix)/lib/libhdf5.a -a \
	           -e $(prefix)/include/hdf5.h; then \
	echo "ERROR building HDF5."; \
	rm -f $(HDF5BUILDDATE); \
	exit 1; \
	fi
	rm -fr $(HDF5DIR)
	touch $(HDF5BUILDDATE)

#-------------------------------------------------------------------------------
# SILO
#-------------------------------------------------------------------------------
cache/$(SILODIST):
	@$(MKDIR) cache
	$(CURL) -k "$(SILOURL)" -o cache/$(SILODIST)

$(SILOBUILDDATE):  $(HDF5BUILDDATE) $(PYTHONTARGET) cache/$(SILODIST)
	@echo "################################################################################"
	@echo "# Building $(SILODIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(SILODIR)
	$(GZIP) -dc cache/$(SILODIST) | $(TAR) -xf -
	$(PATCH) $(SILODIR)/config/config.guess $(srcdir)/config.guess-silo-4.10.2-bsd.patch
	$(PATCH) $(SILODIR)/config/config.sub $(srcdir)/config.sub-silo-4.10.2-bsd.patch
	$(SHELL) -ec "cd $(SILODIR); \
	env PATH=$(SAFEPATH) CC='$(CC)' CXX='$(CXX)' CFLAGS='$(CFLAGS)' CXXFLAGS='$(CXXFLAGS)' $(SILOFLAGS) ./configure --enable-shared=no --enable-fortran=no --prefix=$(prefix) --with-hdf5='$(prefix)/include,$(prefix)/lib' --enable-silex=no --enable-browser=yes ; \
	$(MAKE) ; \
	$(MAKE) install"
	ln -f -s $(prefix)/lib/Silo.so $(LIBDIR)
	@if ! test -e $(prefix)/lib/libsiloh5.a; then \
	echo "ERROR building SILO."; \
	rm -f $(SILOBUILDDATE); \
	exit 1; \
	fi
	rm -fr $(SILODIR)
	touch $(SILOBUILDDATE)

#-------------------------------------------------------------------------------
# Eigen
#-------------------------------------------------------------------------------
cache/$(EIGENDIST):
	@$(MKDIR) cache
	$(CURL) -k "$(EIGENURL)" -o cache/$(EIGENDIST)

$(EIGENBUILDDATE):  cache/$(EIGENDIST) $(HDF5BUILDDATE)
	@echo "################################################################################"
	@echo "# Building $(EIGENDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(EIGENDIR)
	$(BZIP2) -dc cache/$(EIGENDIST) | $(TAR) -xf -
	$(SHELL) -ec 'cd $(EIGENDIR); $(CP) -r Eigen $(prefix)/include'
	@if ! test -e $(prefix)/include/Eigen; then \
	echo "ERROR building EIGEN."; \
	rm -f $(EIGENBUILDDATE); \
	exit 1; \
	fi
	rm -fr $(EIGENDIR)
	touch $(EIGENBUILDDATE)

#-------------------------------------------------------------------------------
# Gnu multiprecision library
#-------------------------------------------------------------------------------
cache/$(GMPDIST):
	@$(MKDIR) cache
	$(CURL) -k "$(GMPURL)" -o cache/$(GMPDIST)

$(GMPBUILDDATE):  cache/$(GMPDIST)
	@echo "################################################################################"
	@echo "# Building $(GMPDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(GMPDIR)
	$(BZIP2) -dc cache/$(GMPDIST) | $(TAR) -xf -
	$(SHELL) -ec 'cd $(GMPDIR); \
	env CC="$(CC)" CXX="$(CXX)" CFLAG="$(CFLAGS)" CXXFLAG="$(CXXFLAGS)" ./configure --prefix=$(prefix) ;\
	$(MAKE); \
	$(MAKE) check; \
	$(MAKE) install'
	@if ! test -e $(prefix)/include/gmp.h -a \
	           -e $(prefix)/lib/libgmp.a; then \
	echo "ERROR building gmp."; \
	rm -f $(GMPBUILDDATE); \
	exit 1; \
	fi
	rm -fr $(GMPDIR)
	touch $(GMPBUILDDATE)

#-------------------------------------------------------------------------------
# mpmath
#-------------------------------------------------------------------------------
cache/$(MPMATHDIST):
	@$(MKDIR) cache
	$(CURL) "$(MPMATHURL)" -o cache/$(MPMATHDIST)

$(MPMATHBUILDDATE):  $(PYTHONTARGET) cache/$(MPMATHDIST)
	@echo "################################################################################"
	@echo "# Building $(MPMATHDIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include $(prefix)/bin
	rm -fr $(MPMATHDIR)
	$(GZIP) -dc cache/$(MPMATHDIST) | $(TAR) -xf -
	$(SHELL) -ec "cd $(MPMATHDIR); $(PYTHONEXE) setup.py install --prefix $(prefix)"
	@if test -n "`$(PYTHONEXE) -c 'import mpmath'`"; then \
	echo "ERROR building mpmath python extension."; \
	rm -f $(MPMATHBUILDDATE); \
	exit 1; \
	fi
	rm -fr $(MPMATHDIR)
	touch $(MPMATHBUILDDATE)

#-------------------------------------------------------------------------------
# The HYPRE linear solver library
#-------------------------------------------------------------------------------
cache/$(HYPREDIST):
	@$(MKDIR) cache
	$(CURL) "$(HYPREURL)" -o cache/$(HYPREDIST)

$(HYPREBUILDDATE):	cache/$(HYPREDIST)
	@echo "################################################################################"
	@echo "# Building $(HYPREDIST)"
	@echo "################################################################################"
	@$(MKDIR) -p $(prefix)/bin $(prefix)/man $(prefix)/lib $(prefix)/include
	rm -fr $(HYPREDIR)
	$(GZIP) -dc cache/$(HYPREDIST) | $(TAR) -xf -
	$(SHELL) -ec "cd $(HYPREDIR)/src; \
	env CC='$(MPICC)' CXX='$(MPICXX)' CFLAGS='$(MPICCFLAGS) $(CFLAGS)' CXXFLAGS='$(MPICXXFLAGS) $(CXXFLAGS)' ./configure --prefix=$(prefix) ;\
	$(MAKE) ; \
	$(MAKE) install"
	@if ! test -e $(prefix)/lib/libHYPRE.a -a \
	           -e $(prefix)/include/HYPRE.h; then \
	echo "ERROR building Hypre."; \
	rm -f $(HYPREBUILDDATE); \
	exit 1; \
	fi
	rm -fr $(HYPREDIR)
	touch $(HYPREBUILDDATE)

#-------------------------------------------------------------------------------
# FLANN
#-------------------------------------------------------------------------------
cache/$(FLANNDIST):
	@$(MKDIR) cache
	$(CURL) "$(FLANNURL)" -o cache/$(FLANNDIST)

$(FLANNBUILDDATE):	cache/$(FLANNDIST) $(CMAKEEXE) $(FLANNDATE) $(PYTHONTARGET)
	@echo "################################################################################"
	@echo "# Building $(FLANNDIST)"
	@echo "################################################################################"
	@$(MKDIR) -p $(prefix)/bin $(prefix)/man $(prefix)/lib $(prefix)/include
	rm -fr $(FLANNDIR)
	$(UNZIP) cache/$(FLANNDIST)
	$(MKDIR) $(FLANNDIR)/build
	$(SHELL) -ec "cd $(FLANNDIR)/build; \
	env CC='$(CC)' CXX='$(CXX)' CFLAGS='$(CFLAGS)' $(CMAKEEXE) -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=$(prefix) .. ; \
	$(MAKE) ; \
	$(MAKE) install"
	@if ! test -e $(prefix)/lib/libflann_s.a; then \
	echo "ERROR building Flann."; \
	rm -f $(FLANNBUILDDATE); \
	exit 1; \
	fi
	rm -fr $(FLANNDIR)/build
	touch $(FLANNBUILDDATE)

#-------------------------------------------------------------------------------
# The Point Cloud Library (PCL)
#-------------------------------------------------------------------------------
cache/$(PCLDIST):
	@$(MKDIR) cache
	$(CURL) "$(PCLURL)" -o cache/$(PCLDIST)

$(PCLBUILDDATE):	cache/$(PCLDIST) $(CMAKEEXE) $(BOOSTTARGET) $(EIGENDATE) $(QHULLDATE) $(FLANNDATE)
	@echo "################################################################################"
	@echo "# Building $(PCLDIST)"
	@echo "################################################################################"
	@$(MKDIR) -p $(prefix)/bin $(prefix)/man $(prefix)/lib $(prefix)/include
	rm -fr $(PCLDIR)
	$(BZIP2) -dc cache/$(PCLDIST) | $(TAR) -xf -
	$(MKDIR) $(PCLDIR)/build
	$(SHELL) -ec "cd $(PCLDIR)/build; \
	env CC='$(CC)' CXX='$(CXX)' CFLAGS='$(CFLAGS)' $(CMAKEEXE) -DFLANN_INCLUDE_DIR=$(prefix)/spheral/src/thirdPartyLibs/$(FLANNDIR) -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=$(prefix) .. ; \
	$(MAKE) ; \
	$(MAKE) install"
	@if ! test -e $(prefix)/lib/libpclstatic.a; then \
	echo "ERROR building Pcl."; \
	rm -f $(PCLBUILDDATE); \
	exit 1; \
	fi
	rm -fr $(PCLDIR)
	touch $(PCLBUILDDATE)

#-------------------------------------------------------------------------------
# polytope
#-------------------------------------------------------------------------------
cache/$(TRIANGLEDIST):
	@$(MKDIR) cache
	$(CURL) "$(TRIANGLEURL)" -o cache/$(TRIANGLEDIST)

cache/$(TETGENDIST):
	@$(MKDIR) cache
	$(CURL) "$(TETGENURL)" -o cache/$(TETGENDIST)

cache/$(POLYTOPEDIST):
	@$(MKDIR) cache
	$(CURL) "$(POLYTOPEURL)" -o cache/$(POLYTOPEDIST)

$(POLYTOPEBUILDDATE):	cache/$(POLYTOPEDIST) $(CMAKEEXE) $(BOOSTTARGET) $(SILOTARGET) $(PYTHONTARGET) $(PYBINDGENPATCHDATE)
	@echo "################################################################################"
	@echo "# Building $(POLYTOPEDIST)"
	@echo "################################################################################"
	rm -fr $(POLYTOPEDIR) $(POLYTOPEINCDIR) $(TRIANGLEDIR)
	@$(MKDIR) -p $(prefix)/bin $(prefix)/man $(prefix)/lib $(POLYTOPEINCDIR) $(TRIANGLEDIR)
	$(GZIP) -dc cache/$(POLYTOPEDIST) | $(TAR) -xf -
	@if test "$(USE_TRIANGLE)" = "1"; then \
		$(MAKE) cache/$(TRIANGLEDIST); \
		$(SHELL) -ec "cd $(TRIANGLEDIR); $(UNZIP) ../cache/$(TRIANGLEDIST)"; \
		$(CP) -f $(TRIANGLEDIR)/triangle.h $(POLYTOPEDIR)/src; \
		$(CP) -f $(TRIANGLEDIR)/triangle.c $(POLYTOPEDIR)/src; \
	fi
	@if test "$(USE_TETGEN)" = "1"; then \
		$(MAKE) cache/$(TETGENDIST); \
		$(GZIP) -cd cache/$(TETGENDIST) | $(TAR) -xf - ; \
		$(CP) -f $(TETGENDIR)/tetgen.h $(POLYTOPEDIR)/src; \
		$(CP) -f $(TETGENDIR)/tetgen.cxx $(POLYTOPEDIR)/src; \
	fi
	env PATH=$(SAFEPATH) CC='$(CC)' CXX='$(CXX)' $(SHELL) -ec "cd $(POLYTOPEDIR); \
	$(MAKE) MAKEFLAGS= $(POLYTOPEFLAGS) config; \
	$(MAKE) MAKEFLAGS= $(POLYTOPEFLAGS) install"
	@if ! test -e $(prefix)/lib/libpolytope.a -a \
	           -e $(prefix)/lib/libvoro_2d.a -a \
	           -e $(prefix)/lib/libvoro_3d.a -a \
                   -e $(PYTHONLIBDIR)/polytope/PolytopeModules.so -a \
	           -e $(prefix)/include/polytope/polytope.hh; then \
	echo "ERROR building Polytope."; \
	rm -f $(POLYTOPEBUILDDATE); \
	exit 1; \
	fi
	rm -fr $(POLYTOPEDIR) $(TRIANGLEDIR) $(TETGENDIR)
	touch $(POLYTOPEBUILDDATE)

#-------------------------------------------------------------------------------
# OpenSubDiv
#-------------------------------------------------------------------------------
cache/$(OPENSUBDIVDIST):
	@$(MKDIR) cache
	$(CURL) "$(OPENSUBDIVURL)" -o cache/$(OPENSUBDIVDIST)

$(OPENSUBDIVBUILDDATE):	cache/$(OPENSUBDIVDIST) $(CMAKEEXE)
	@echo "################################################################################"
	@echo "# Building $(OPENSUBDIVDIST)"
	@echo "################################################################################"
	@$(MKDIR) -p $(prefix)/bin $(prefix)/man $(prefix)/lib $(prefix)/include
	rm -fr $(OPENSUBDIVDIR)
	$(UNZIP) cache/$(OPENSUBDIVDIST)
	$(MKDIR) $(OPENSUBDIVDIR)/build
	$(PATCH) $(OPENSUBDIVDIR)/CMakeLists.txt $(srcdir)/OpenSubdiv_3_3_0_CMakeLists.txt.patch
	env PATH=$(SAFEPATH) $(SHELL) -ec "cd $(OPENSUBDIVDIR)/build; \
	$(CMAKEEXE) -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(prefix) -DCMAKE_C_COMPILER='$(CC)' -DCMAKE_CXX_COMPILER='$(CXX)' -DCMAKE_C_FLAGS='$(CFLAGS)' -DNO_PYTHON=1 -DNO_EXAMPLES=1 -DNO_REGRESSION=1 -DNO_OMP=1 -DNO_CUDA=1 -DNO_OPENGL=1 -DNO_CLEW=1 -DNO_TBB=1 .. ; \
	$(MAKE) ; \
	$(MAKE) install"
	@if ! test -e $(prefix)/lib/libosdCPU.a ; then \
	echo "ERROR building Opensubdiv."; \
	rm -f $(OPENSUBDIVBUILDDATE); \
	exit 1; \
	fi
	rm -fr $(OPENSUBDIVDIR)
	touch $(OPENSUBDIVBUILDDATE)

#-------------------------------------------------------------------------------
# r3d
# Note our patches to the r3d library are just to increase the maximum allowed
# number of vertices.
#-------------------------------------------------------------------------------
cache/$(R3DDIST):
	@$(MKDIR) cache
	$(CURL) "$(R3DURL)" -o cache/$(R3DDIST)

$(R3DBUILDDATE):	cache/$(R3DDIST)
	@echo "################################################################################"
	@echo "# Building $(R3DDIST)"
	@echo "################################################################################"
	rm -fr $(R3DDIR) $(R3DINCDIR)
	@$(MKDIR) -p $(prefix)/bin $(prefix)/lib $(R3DINCDIR)
	$(UNZIP) cache/$(R3DDIST)
	$(PATCH) $(R3DDIR)/r2d.h $(srcdir)/r3d_r2d_h.patch
	$(PATCH) $(R3DDIR)/r3d.h $(srcdir)/r3d_r3d_h.patch
	#$(PATCH) $(R3DDIR)/r3d.c $(srcdir)/r3d_r3d_c.patch    # <--- Missing.  I think Matt may have an unchecked in version of this?
	env PATH=$(SAFEPATH) $(SHELL) -ec "cd $(R3DDIR); \
	$(MAKE) CC='$(CC)' CFLAGS='$(CFLAGS)'"
	@if ! test -e $(R3DDIR)/libr3d.a; then \
	echo "ERROR building R3d."; \
	rm -f $(R3DBUILDDATE); \
	exit 1; \
	fi
	$(CP) -f $(R3DDIR)/*.h $(R3DINCDIR)
	$(CP) -f $(R3DDIR)/libr3d.a $(prefix)/lib
	rm -fr $(R3DDIR)
	touch $(R3DBUILDDATE)

#-------------------------------------------------------------------------------
# pybind11
#-------------------------------------------------------------------------------
cache/$(PYBIND11DIST):
	@$(MKDIR) cache
	$(CURL) -k "$(PYBIND11URL)" -o cache/$(PYBIND11DIST)

$(PYBIND11BUILDDATE):  cache/$(PYBIND11DIST)
	@echo "################################################################################"
	@echo "# Building $(PYBIND11DIST)"
	@echo "################################################################################"
	@$(MKDIR) $(LIBDIR) $(prefix)/include
	rm -fr $(PYBIND11DIR)
	$(GZIP) -dc cache/$(PYBIND11DIST) | $(TAR) -xf -
	$(SHELL) -ec 'cd $(PYBIND11DIR)/include; $(CP) -fr pybind11 $(prefix)/include'
	@if ! test -e $(prefix)/include/pybind11; then \
	echo "ERROR building PYBIND11."; \
	rm -f $(PYBIND11BUILDDATE); \
	exit 1; \
	fi
	rm -fr $(PYBIND11DIR)
	touch $(PYBIND11BUILDDATE)

#-------------------------------------------------------------------------------
# Easy profile
#-------------------------------------------------------------------------------
cache/$(EASYPROFILEDIST):
	@$(MKDIR) cache
	$(CURL) "$(EASYPROFILEURL)" -o cache/$(EASYPROFILEDIST)

$(EASYPROFILEBUILDDATE):	cache/$(EASYPROFILEDIST) $(CMAKEEXE)
	@echo "################################################################################"
	@echo "# Building $(EASYPROFILEDIST)"
	@echo "################################################################################"
	@$(MKDIR) -p $(prefix)/bin $(prefix)/man $(prefix)/lib $(prefix)/include
	rm -fr $(EASYPROFILEDIR)
	$(GZIP) -dc cache/$(EASYPROFILEDIST) | $(TAR) -xf -
	$(MKDIR) $(EASYPROFILEDIR)/build
	env PATH='$(prefix)/bin:$(PATH)' $(SHELL) -ec "cd $(EASYPROFILEDIR)/build; \
	$(CMAKEEXE) -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(prefix)  .. ; \
	$(MAKE) ; \
	$(MAKE) install"
	rm -f $(prefix)/lib/libeasy_profiler.so
	ln -s $(prefix)/bin/libeasy_profiler.so $(prefix)/lib/libeasy_profiler.so
	@if ! test -e $(prefix)/bin/libeasy_profiler.so -a \
	           -e $(prefix)/bin/profiler_gui -a \
	           -e $(prefix)/include/easy ; then \
	echo "ERROR building Easyprofile."; \
	rm -f $(EASYPROFILEBUILDDATE); \
	exit 1; \
	fi
	rm -fr $(EASYPROFILEDIR)
	touch $(EASYPROFILEBUILDDATE)
