-- This script assumes that the user executing it is a Postgres user.
-- It will create a database for Spheral++, and populate it with information 
-- about the data structures to be used.  

-----------------------------------------------------------------------------
--                            User-defined types
-----------------------------------------------------------------------------

-- Create a one-dimensional vector type.
-- First, register its supporting I/O functions.
CREATE FUNCTION vector1d_in (opaque)
   RETURNS vector1d
   AS '@LIBDIR@/SpheralDbTypes.so'
   LANGUAGE 'c'; 

CREATE FUNCTION vector1d_out (opaque)
   RETURNS opaque
   AS '@LIBDIR@/SpheralDbTypes.so'
   LANGUAGE 'c'; 

CREATE TYPE vector1d (
   INTERNALLENGTH = 8,
   INPUT = vector1d_in,
   OUTPUT = vector1d_out
); 

-- Create a two-dimensional vector type.
-- First, register its supporting I/O functions.
CREATE FUNCTION vector2d_in (opaque)
   RETURNS vector2d
   AS '@LIBDIR@/SpheralDbTypes.so'
   LANGUAGE 'c'; 

CREATE FUNCTION vector2d_out (opaque)
   RETURNS opaque
   AS '@LIBDIR@/SpheralDbTypes.so'
   LANGUAGE 'c'; 

CREATE TYPE vector2d (
   INTERNALLENGTH = 16,
   INPUT = vector2d_in,
   OUTPUT = vector2d_out
); 

-- Create a three-dimensional vector type.
-- First, register its supporting I/O functions.
CREATE FUNCTION vector3d_in (opaque)
   RETURNS vector3d
   AS '@LIBDIR@/SpheralDbTypes.so'
   LANGUAGE 'c'; 

CREATE FUNCTION vector3d_out (opaque)
   RETURNS opaque
   AS '@LIBDIR@/SpheralDbTypes.so'
   LANGUAGE 'c'; 

CREATE TYPE vector3d (
   INTERNALLENGTH = 24,
   INPUT = vector3d_in,
   OUTPUT = vector3d_out
); 

-- Create a one-dimensional tensor type.
-- First, register its supporting I/O functions.
CREATE FUNCTION tensor1d_in (opaque)
   RETURNS tensor1d
   AS '@LIBDIR@/SpheralDbTypes.so'
   LANGUAGE 'c'; 

CREATE FUNCTION tensor1d_out (opaque)
   RETURNS opaque
   AS '@LIBDIR@/SpheralDbTypes.so'
   LANGUAGE 'c'; 

CREATE TYPE tensor1d (
   INTERNALLENGTH = 8,
   INPUT = tensor1d_in,
   OUTPUT = tensor1d_out
); 

-- Create a two-dimensional tensor type.
-- First, register its supporting I/O functions.
CREATE FUNCTION tensor2d_in (opaque)
   RETURNS tensor1d
   AS '@LIBDIR@/SpheralDbTypes.so'
   LANGUAGE 'c'; 

CREATE FUNCTION tensor2d_out (opaque)
   RETURNS opaque
   AS '@LIBDIR@/SpheralDbTypes.so'
   LANGUAGE 'c'; 

CREATE TYPE tensor2d (
   INTERNALLENGTH = 32,
   INPUT = tensor2d_in,
   OUTPUT = tensor2d_out
); 

-- Create a three-dimensional tensor type.
-- First, register its supporting I/O functions.
CREATE FUNCTION tensor3d_in (opaque)
   RETURNS tensor1d
   AS '@LIBDIR@/SpheralDbTypes.so'
   LANGUAGE 'c'; 

CREATE FUNCTION tensor3d_out (opaque)
   RETURNS opaque
   AS '@LIBDIR@/SpheralDbTypes.so'
   LANGUAGE 'c'; 

CREATE TYPE tensor3d (
   INTERNALLENGTH = 72,
   INPUT = tensor3d_in,
   OUTPUT = tensor3d_out
); 

-- Create a one-dimensional symmetric tensor type.
-- First, register its supporting I/O functions.
CREATE FUNCTION symtensor1d_in (opaque)
   RETURNS symtensor1d
   AS '@LIBDIR@/SpheralDbTypes.so'
   LANGUAGE 'c'; 

CREATE FUNCTION symtensor1d_out (opaque)
   RETURNS opaque
   AS '@LIBDIR@/SpheralDbTypes.so'
   LANGUAGE 'c'; 

CREATE TYPE symtensor1d (
   INTERNALLENGTH = 8,
   INPUT = symtensor1d_in,
   OUTPUT = symtensor1d_out
); 

-- Create a two-dimensional symmetric tensor type.
-- First, register its supporting I/O functions.
CREATE FUNCTION symtensor2d_in (opaque)
   RETURNS symtensor2d
   AS '@LIBDIR@/SpheralDbTypes.so'
   LANGUAGE 'c'; 

CREATE FUNCTION symtensor2d_out (opaque)
   RETURNS opaque
   AS '@LIBDIR@/SpheralDbTypes.so'
   LANGUAGE 'c'; 

CREATE TYPE symtensor2d (
   INTERNALLENGTH = 24,
   INPUT = symtensor2d_in,
   OUTPUT = symtensor2d_out
); 

-- Create a three-dimensional symmetric tensor type.
CREATE FUNCTION symtensor3d_in (opaque)
   RETURNS symtensor3d
   AS '@LIBDIR@/SpheralDbTypes.so'
   LANGUAGE 'c'; 

CREATE FUNCTION symtensor3d_out (opaque)
   RETURNS opaque
   AS '@LIBDIR@/SpheralDbTypes.so'
   LANGUAGE 'c'; 

CREATE TYPE symtensor3d (
   INTERNALLENGTH = 48,
   INPUT = symtensor3d_in,
   OUTPUT = symtensor3d_out
); 

-----------------------------------------------------------------------------
--                            Non-aggregate values
-----------------------------------------------------------------------------

-- Create a runs table that contains the names of all the stored entities.
CREATE TABLE tags (
   id   SERIAL PRIMARY KEY,
   name TEXT UNIQUE NOT NULL
);

-- Create a names table that contains the names of all the stored entities.
CREATE TABLE names (
   id   SERIAL PRIMARY KEY,
   name TEXT UNIQUE NOT NULL
);

-- Create an integer values table.
CREATE TABLE integers (
   tag_id                   SERIAL,
   name_id                  SERIAL,
   value                    BIGINT NOT NULL,
   CONSTRAINT fkey_name_id  FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id   FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT integers_pkey PRIMARY KEY (name_id, tag_id)
);

-- Create a string values table.
CREATE TABLE strings (
   tag_id                  SERIAL,
   name_id                 SERIAL,
   value                   TEXT NOT NULL,
   CONSTRAINT fkey_name_id FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id  FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT strings_pkey PRIMARY KEY (name_id, tag_id)
);

-- Create a double values table.
CREATE TABLE doubles (
   tag_id                  SERIAL,
   name_id                 SERIAL,
   value                   DOUBLE PRECISION NOT NULL,
   CONSTRAINT fkey_name_id FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id  FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT doubles_pkey PRIMARY KEY (name_id, tag_id)
);

-- Create a boolean values table.
CREATE TABLE booleans (
   tag_id                    SERIAL,
   name_id                   SERIAL,
   value                     BOOLEAN NOT NULL,
   CONSTRAINT fkey_name_id   FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id    FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT booleans_pkey  PRIMARY KEY (name_id, tag_id)
);

-- Create a 1D vector values table.
CREATE TABLE vector1ds (
   tag_id                    SERIAL,
   name_id                   SERIAL,
   value                     vector1d NOT NULL,
   CONSTRAINT fkey_name_id   FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id    FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT vector1ds_pkey PRIMARY KEY (name_id, tag_id)
);

-- Create a 2D vector values table.
CREATE TABLE vector2ds (
   tag_id                    SERIAL,
   name_id                   SERIAL,
   value                     vector2d NOT NULL,
   CONSTRAINT fkey_name_id   FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id    FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT vector2ds_pkey PRIMARY KEY (name_id, tag_id)
);

-- Create a 3D vector values table.
CREATE TABLE vector3ds (
   tag_id                    SERIAL,
   name_id                   SERIAL,
   value                     vector3d NOT NULL,
   CONSTRAINT fkey_name_id   FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id    FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT vector3ds_pkey PRIMARY KEY (name_id, tag_id)
);

-- Create a 1D tensor values table.
CREATE TABLE tensor1ds (
   tag_id                    SERIAL,
   name_id                   SERIAL,
   value                     tensor1d NOT NULL,
   CONSTRAINT fkey_name_id   FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id    FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT tensor1ds_pkey PRIMARY KEY (name_id, tag_id)
);

-- Create a 2D tensor values table.
CREATE TABLE tensor2ds (
   tag_id                       SERIAL,
   name_id                      SERIAL,
   value                        tensor2d NOT NULL,
   CONSTRAINT fkey_name_id      FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id       FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT tensor2ds_pkey    PRIMARY KEY (name_id, tag_id)
);

-- Create a 3D tensor values table.
CREATE TABLE tensor3ds (
   tag_id                       SERIAL,
   name_id                      SERIAL,
   value                        tensor3d NOT NULL,
   CONSTRAINT fkey_name_id      FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id       FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT tensor3ds_pkey    PRIMARY KEY (name_id, tag_id)
);

-- Create a 1D symmetric tensor values table.
CREATE TABLE symtensor1ds (
   tag_id                       SERIAL,
   name_id                      SERIAL,
   value                        symtensor1d NOT NULL,
   CONSTRAINT fkey_name_id      FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id       FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT symtensor1ds_pkey PRIMARY KEY (name_id, tag_id)
);

-- Create a 2D symmetric tensor values table.
CREATE TABLE symtensor2ds (
   tag_id                       SERIAL,
   name_id                      SERIAL,
   value                        symtensor2d NOT NULL,
   CONSTRAINT fkey_name_id      FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id       FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT symtensor2ds_pkey PRIMARY KEY (name_id, tag_id)
);

-- Create a 3D symmetric tensor values table.
CREATE TABLE symtensor3ds (
   tag_id                       SERIAL,
   name_id                      SERIAL,
   value                        symtensor3d NOT NULL,
   CONSTRAINT fkey_name_id      FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id       FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT symtensor3ds_pkey PRIMARY KEY (name_id, tag_id)
);

-----------------------------------------------------------------------------
--                            Aggregate values (fields)
-----------------------------------------------------------------------------

-- Create a scalar (double-precision) field values table.
CREATE TABLE scalarfields (
   tag_id                            SERIAL,
   name_id                           SERIAL,
   elements                          DOUBLE PRECISION[] NOT NULL,
   CONSTRAINT fkey_name_id           FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id            FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT scalarfields_pkey      PRIMARY KEY (name_id, tag_id)
);

-- Create a 1D vector field values table.
CREATE TABLE vector1dfields (
   tag_id                            SERIAL,
   name_id                           SERIAL,
   elements                          vector1d[] NOT NULL,
   CONSTRAINT fkey_name_id           FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id            FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT vector1dfields_pkey    PRIMARY KEY (name_id, tag_id)
);

-- Create a 2D vector field values table.
CREATE TABLE vector2dfields (
   tag_id                            SERIAL,
   name_id                           SERIAL,
   elements                          vector2d[] NOT NULL,
   CONSTRAINT fkey_name_id           FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id            FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT vector2dfields_pkey    PRIMARY KEY (name_id, tag_id)
);

-- Create a 3D vector field values table.
CREATE TABLE vector3dfields (
   tag_id                            SERIAL,
   name_id                           SERIAL,
   elements                          vector3d[] NOT NULL,
   CONSTRAINT fkey_name_id           FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id            FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT vector3dfields_pkey    PRIMARY KEY (name_id, tag_id)
);

-- Create a 1D tensor field values table.
CREATE TABLE tensor1dfields (
   tag_id                            SERIAL,
   name_id                           SERIAL,
   elements                          tensor1d[] NOT NULL,
   CONSTRAINT fkey_name_id           FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id            FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT tensor1dfields_pkey    PRIMARY KEY (name_id, tag_id)
);

-- Create a 2D tensor field values table.
CREATE TABLE tensor2dfields (
   tag_id                            SERIAL,
   name_id                           SERIAL,
   elements                          tensor2d[] NOT NULL,
   CONSTRAINT fkey_name_id           FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id            FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT tensor2dfields_pkey    PRIMARY KEY (name_id, tag_id)
);

-- Create a 3D tensor field values table.
CREATE TABLE tensor3dfields (
   tag_id                            SERIAL,
   name_id                           SERIAL,
   elements                          tensor3d[] NOT NULL,
   CONSTRAINT fkey_name_id           FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id            FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT tensor3dfields_pkey    PRIMARY KEY (name_id, tag_id)
);

-- Create a 1D symmetric tensor field values table.
CREATE TABLE symtensor1dfields (
   tag_id                            SERIAL,
   name_id                           SERIAL,
   elements                          symtensor1d[] NOT NULL,
   CONSTRAINT fkey_name_id           FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id            FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT symtensor1dfields_pkey PRIMARY KEY (name_id, tag_id)
);

-- Create a 2D symmetric tensor field values table.
CREATE TABLE symtensor2dfields (
   tag_id                            SERIAL,
   name_id                           SERIAL,
   elements                          symtensor2d[] NOT NULL,
   CONSTRAINT fkey_name_id           FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id            FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT symtensor2dfields_pkey PRIMARY KEY (name_id, tag_id)
);

-- Create a 3D symmetric tensor field values table.
CREATE TABLE symtensor3dfields (
   tag_id                            SERIAL,
   name_id                           SERIAL,
   elements                          symtensor3d[] NOT NULL,
   CONSTRAINT fkey_name_id           FOREIGN KEY (name_id) REFERENCES names (id),
   CONSTRAINT fkey_tag_id            FOREIGN KEY (tag_id) REFERENCES tags (id),
   CONSTRAINT symtensor3dfields_pkey PRIMARY KEY (name_id, tag_id)
);

-----------------------------------------------------------------------------
--                               Functions
-----------------------------------------------------------------------------

-- Get the ID for a given tag, or create it if it doesn't exist.
CREATE FUNCTION get_tag_id(TEXT) RETURNS INTEGER AS '
DECLARE
   tagid tags.id%TYPE;
   nid names.id%TYPE;
BEGIN
   -- Make sure that our tag exists in the tags table and get its ID.
   SELECT INTO tagid id 
     FROM tags 
    WHERE name = $1;

   -- If the tag does not exist in the database, create it and get its ID.
   IF NOT FOUND THEN
      INSERT INTO tags (name)
           VALUES ($1);
      -- This is AWFUL!!!
      SELECT INTO tagid id
        FROM tags
       WHERE name = $1;
   END IF;

   RETURN tagid;
END;
' LANGUAGE 'plpgsql';

-- Get the ID for a given name, or create it if it doesn't exist.
CREATE FUNCTION get_name_id(TEXT) RETURNS INTEGER AS '
DECLARE
   tagid tags.id%TYPE;
   nid names.id%TYPE;
BEGIN
   -- Make sure that our name exists in the tags table and get its ID.
   SELECT INTO nid id 
     FROM names 
    WHERE name = $1;

   -- If the tag does not exist in the database, create it and get its ID.
   IF NOT FOUND THEN
      INSERT INTO names (name)
           VALUES ($1);
      -- This is AWFUL!!!
      SELECT INTO nid id
        FROM names
       WHERE name = $1;
   END IF;

   RETURN nid;
END;
' LANGUAGE 'plpgsql';

-- Add an integer value to the run.
CREATE FUNCTION write_integer(TEXT,
                              TEXT,
                              BIGINT) RETURNS INTEGER AS '  
DECLARE
   tagname ALIAS FOR $1;
   valuename ALIAS FOR $2;
   newvalue ALIAS FOR $3;
   tagid tags.id%TYPE;
   nid names.id%TYPE;
   val integers.value%TYPE;
BEGIN 

   -- Get the tag and name IDs.
   tagid := get_tag_id(tagname);
   nid := get_name_id(valuename);

   -- Add the value to the values table, associating it with the 
   -- above name ID and tag ID.
   -- ** SIGH **
   SELECT INTO val value
     FROM integers
    WHERE tag_id = tagid
      AND name_id = nid;

   -- If the value is found, update it.  Otherwise, insert it
   -- into the table.
   IF NOT FOUND THEN
      INSERT INTO integers (tag_id, name_id, value) 
           VALUES (tagid, nid, newvalue);
   ELSE
      UPDATE integers
         SET value = newvalue
       WHERE tag_id = tagid
         AND name_id = nid;
   END IF;

   RETURN 1;

END;
' LANGUAGE 'plpgsql';

-- Read an integer value from the run.
CREATE FUNCTION read_integer(TEXT,
                             TEXT) RETURNS INTEGER AS '
DECLARE
   val integers.value%TYPE;
BEGIN
   SELECT INTO val value
     FROM integers
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN val;
END;
' LANGUAGE 'plpgsql';

-- Delete an integer value from the run.
CREATE FUNCTION delete_integer(TEXT,
                               TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM integers
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Add a boolean value to the run.
CREATE FUNCTION write_boolean(TEXT,
                              TEXT,
                              BOOL) RETURNS INTEGER AS '  
DECLARE
   tagname ALIAS FOR $1;
   valuename ALIAS FOR $2;
   newvalue ALIAS FOR $3;
   tagid tags.id%TYPE;
   nid names.id%TYPE;
   val booleans.value%TYPE;
BEGIN 

   -- Get the tag and name IDs.
   tagid := get_tag_id(tagname);
   nid := get_name_id(valuename);

   -- Add the value to the values table, associating it with the 
   -- above name ID and tag ID.
   -- ** SIGH **
   SELECT INTO val value
     FROM booleans
    WHERE tag_id = tagid
      AND name_id = nid;

   -- If the value is found, update it.  Otherwise, insert it
   -- into the table.
   IF NOT FOUND THEN
      INSERT INTO booleans (tag_id, name_id, value) 
           VALUES (tagid, nid, newvalue);
   ELSE
      UPDATE booleans
         SET value = newvalue
       WHERE tag_id = tagid
         AND name_id = nid;
   END IF;

   RETURN 1;

END;
' LANGUAGE 'plpgsql';

-- Read a boolean value from the run.
CREATE FUNCTION read_boolean(TEXT,
                             TEXT) RETURNS BOOL AS '
DECLARE
   val booleans.value%TYPE;
BEGIN
   SELECT INTO val value
     FROM booleans
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN val;
END;
' LANGUAGE 'plpgsql';

-- Delete a boolean value from the run.
CREATE FUNCTION delete_boolean(TEXT,
                               TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM booleans
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Add a string value to the run.
CREATE FUNCTION write_string(TEXT,
                             TEXT,
                             TEXT) RETURNS INTEGER AS '  
DECLARE
   tagid tags.id%TYPE;
   nid names.id%TYPE;
   val strings.value%TYPE;
BEGIN 

   -- Get the IDs of the tag and the name associated with this object.
   tagid := get_tag_id($1);
   nid := get_name_id($2);

   -- Add the value to the values table, associating it with the 
   -- above name ID and tag ID.
   -- ** SIGH **
   SELECT INTO val value
     FROM strings
    WHERE tag_id = tagid
      AND name_id = nid;

   -- If the value is found, update it.  Otherwise, insert it
   -- into the table.
   IF NOT FOUND THEN
      INSERT INTO strings (tag_id, name_id, value) 
           VALUES (tagid, nid, $3);
   ELSE
      UPDATE strings
         SET value = $3
       WHERE tag_id = tagid
         AND name_id = nid;
   END IF;

   RETURN 1;

END;
' LANGUAGE 'plpgsql';

-- Read a string value from the run.
CREATE FUNCTION read_string(TEXT,
                            TEXT) RETURNS TEXT AS '
DECLARE
   val strings.value%TYPE;
BEGIN
   SELECT INTO val value
     FROM strings
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN val;
END;
' LANGUAGE 'plpgsql';

-- Delete a string value from the run.
CREATE FUNCTION delete_string(TEXT,
                              TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM strings
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Add a double value to the run.
CREATE FUNCTION write_scalar(TEXT,
                             TEXT,
                             DOUBLE PRECISION) RETURNS INTEGER AS '  
DECLARE
   tagid tags.id%TYPE;
   nid names.id%TYPE;
   val doubles.value%TYPE;
BEGIN 

   -- Get the IDs of the tag and the name associated with this object.
   tagid := get_tag_id($1);
   nid := get_name_id($2);

   -- Add the value to the values table, associating it with the 
   -- above name ID and tag ID.
   -- ** SIGH **
   SELECT INTO val value
     FROM doubles
    WHERE tag_id = tagid
      AND name_id = nid;

   -- If the value is found, update it.  Otherwise, insert it
   -- into the table.
   IF NOT FOUND THEN
      INSERT INTO doubles (tag_id, name_id, value)
           VALUES (tagid, nid, $3);
   ELSE
      UPDATE doubles
         SET value = $3
       WHERE tag_id = tagid
         AND name_id = nid;
   END IF;

   RETURN 1;

END;
' LANGUAGE 'plpgsql';

-- Read a scalar value from the run.
CREATE FUNCTION read_scalar(TEXT,
                            TEXT) RETURNS TEXT AS '
DECLARE
   val doubles.value%TYPE;
BEGIN
   SELECT INTO val value
     FROM doubles
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN val;
END;
' LANGUAGE 'plpgsql';

-- Delete a scalar value from the run.
CREATE FUNCTION delete_scalar(TEXT,
                               TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM doubles
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Add a vector1d value to the run.
CREATE FUNCTION write_vector1d(TEXT,
                               TEXT,
                               vector1d) RETURNS INTEGER AS '  
DECLARE
   tagid tags.id%TYPE;
   nid names.id%TYPE;
   val vector1ds.value%TYPE;
BEGIN 

   -- Get the IDs of the tag and the name associated with this object.
   tagid := get_tag_id($1);
   nid := get_name_id($2);

   -- Add the value to the values table, associating it with the 
   -- above name ID and tag ID.
   -- ** SIGH **
   SELECT INTO val value
     FROM vector1ds
    WHERE tag_id = tagid
      AND name_id = nid;

   -- If the value is found, update it.  Otherwise, insert it
   -- into the table.
   IF NOT FOUND THEN
      INSERT INTO vector1ds (tag_id, name_id, value)
           VALUES (tagid, nid, $3);
   ELSE
      UPDATE vector1ds
         SET value = $3
       WHERE tag_id = tagid
         AND name_id = nid;
   END IF;

   RETURN 1;

END;
' LANGUAGE 'plpgsql';

-- Read a vector1d value from the run.
CREATE FUNCTION read_vector1d(TEXT,
                              TEXT) RETURNS TEXT AS '
DECLARE
   val vector1ds.value%TYPE;
BEGIN
   SELECT INTO val value
     FROM vector1ds
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN val;
END;
' LANGUAGE 'plpgsql';

-- Delete a vector1d value from the run.
CREATE FUNCTION delete_vector1d(TEXT,
                                TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM vector1ds
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Add a vector2d value to the run.
CREATE FUNCTION write_vector2d(TEXT,
                               TEXT,
                               vector2d) RETURNS INTEGER AS '  
DECLARE
   tagid tags.id%TYPE;
   nid names.id%TYPE;
   val vector2ds.value%TYPE;
BEGIN 

   -- Get the IDs of the tag and the name associated with this object.
   tagid := get_tag_id($1);
   nid := get_name_id($2);

   -- Add the value to the values table, associating it with the 
   -- above name ID and tag ID.
   -- ** SIGH **
   SELECT INTO val value
     FROM vector2ds
    WHERE tag_id = tagid
      AND name_id = nid;

   -- If the value is found, update it.  Otherwise, insert it
   -- into the table.
   IF NOT FOUND THEN
      INSERT INTO vector2ds (tag_id, name_id, value)
           VALUES (tagid, nid, $3);
   ELSE
      UPDATE vector2ds
         SET value = $3
       WHERE tag_id = tagid
         AND name_id = nid;
   END IF;

   RETURN 1;

END;
' LANGUAGE 'plpgsql';

-- Read a vector2d value from the run.
CREATE FUNCTION read_vector2d(TEXT,
                              TEXT) RETURNS TEXT AS '
DECLARE
   val vector2ds.value%TYPE;
BEGIN
   SELECT INTO val value
     FROM vector2ds
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN val;
END;
' LANGUAGE 'plpgsql';

-- Delete a vector2d value from the run.
CREATE FUNCTION delete_vector2d(TEXT,
                                TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM vector2ds
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Add a vector3d value to the run.
CREATE FUNCTION write_vector3d(TEXT,
                               TEXT,
                               vector3d) RETURNS INTEGER AS '  
DECLARE
   tagid tags.id%TYPE;
   nid names.id%TYPE;
   val vector3ds.value%TYPE;
BEGIN 

   -- Get the IDs of the tag and the name associated with this object.
   tagid := get_tag_id($1);
   nid := get_name_id($2);

   -- Add the value to the values table, associating it with the 
   -- above name ID and tag ID.
   -- ** SIGH **
   SELECT INTO val value
     FROM vector3ds
    WHERE tag_id = tagid
      AND name_id = nid;

   -- If the value is found, update it.  Otherwise, insert it
   -- into the table.
   IF NOT FOUND THEN
      INSERT INTO vector3ds (tag_id, name_id, value)
           VALUES (tagid, nid, $3);
   ELSE
      UPDATE vector3ds
         SET value = $3
       WHERE tag_id = tagid
         AND name_id = nid;
   END IF;

   RETURN 1;

END;
' LANGUAGE 'plpgsql';

-- Read a vector3d value from the run.
CREATE FUNCTION read_vector3d(TEXT,
                              TEXT) RETURNS TEXT AS '
DECLARE
   val vector3ds.value%TYPE;
BEGIN
   SELECT INTO val value
     FROM vector3ds
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN val;
END;
' LANGUAGE 'plpgsql';

-- Delete a vector3d value from the run.
CREATE FUNCTION delete_vector3d(TEXT,
                                TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM vector3ds
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Add a tensor1d value to the run.
CREATE FUNCTION write_tensor1d(TEXT,
                               TEXT,
                               tensor1d) RETURNS INTEGER AS '  
DECLARE
   tagid tags.id%TYPE;
   nid names.id%TYPE;
   val tensor1ds.value%TYPE;
BEGIN 

   -- Get the IDs of the tag and the name associated with this object.
   tagid := get_tag_id($1);
   nid := get_name_id($2);

   -- Add the value to the values table, associating it with the 
   -- above name ID and tag ID.
   -- ** SIGH **
   SELECT INTO val value
     FROM tensor1ds
    WHERE tag_id = tagid
      AND name_id = nid;

   -- If the value is found, update it.  Otherwise, insert it
   -- into the table.
   IF NOT FOUND THEN
      INSERT INTO tensor1ds (tag_id, name_id, value)
           VALUES (tagid, nid, $3);
   ELSE
      UPDATE tensor1ds
         SET value = $3
       WHERE tag_id = tagid
         AND name_id = nid;
   END IF;

   RETURN 1;

END;
' LANGUAGE 'plpgsql';

-- Read a tensor1d value from the run.
CREATE FUNCTION read_tensor1d(TEXT,
                              TEXT) RETURNS TEXT AS '
DECLARE
   val tensor1ds.value%TYPE;
BEGIN
   SELECT INTO val value
     FROM tensor1ds
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN val;
END;
' LANGUAGE 'plpgsql';

-- Delete a tensor1d value from the run.
CREATE FUNCTION delete_tensor1d(TEXT,
                                TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM tensor1ds
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Add a tensor2d value to the run.
CREATE FUNCTION write_tensor2d(TEXT,
                               TEXT,
                               tensor2d) RETURNS INTEGER AS '  
DECLARE
   tagid tags.id%TYPE;
   nid names.id%TYPE;
   val tensor2ds.value%TYPE;
BEGIN 

   -- Get the IDs of the tag and the name associated with this object.
   tagid := get_tag_id($1);
   nid := get_name_id($2);

   -- Add the value to the values table, associating it with the 
   -- above name ID and tag ID.
   -- ** SIGH **
   SELECT INTO val value
     FROM tensor2ds
    WHERE tag_id = tagid
      AND name_id = nid;

   -- If the value is found, update it.  Otherwise, insert it
   -- into the table.
   IF NOT FOUND THEN
      INSERT INTO tensor2ds (tag_id, name_id, value)
           VALUES (tagid, nid, $3);
   ELSE
      UPDATE tensor2ds
         SET value = $3
       WHERE tag_id = tagid
         AND name_id = nid;
   END IF;

   RETURN 1;

END;
' LANGUAGE 'plpgsql';

-- Read a tensor2d value from the run.
CREATE FUNCTION read_tensor2d(TEXT,
                              TEXT) RETURNS TEXT AS '
DECLARE
   val tensor2ds.value%TYPE;
BEGIN
   SELECT INTO val value
     FROM tensor2ds
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN val;
END;
' LANGUAGE 'plpgsql';

-- Delete a tensor2d value from the run.
CREATE FUNCTION delete_tensor2d(TEXT,
                                TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM tensor2ds
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Add a tensor3d value to the run.
CREATE FUNCTION write_tensor3d(TEXT,
                               TEXT,
                               tensor3d) RETURNS INTEGER AS '  
DECLARE
   tagid tags.id%TYPE;
   nid names.id%TYPE;
   val tensor3ds.value%TYPE;
BEGIN 

   -- Get the IDs of the tag and the name associated with this object.
   tagid := get_tag_id($1);
   nid := get_name_id($2);

   -- Add the value to the values table, associating it with the 
   -- above name ID and tag ID.
   -- ** SIGH **
   SELECT INTO val value
     FROM tensor3ds
    WHERE tag_id = tagid
      AND name_id = nid;

   -- If the value is found, update it.  Otherwise, insert it
   -- into the table.
   IF NOT FOUND THEN
      INSERT INTO tensor3ds (tag_id, name_id, value)
           VALUES (tagid, nid, $3);
   ELSE
      UPDATE tensor3ds
         SET value = $3
       WHERE tag_id = tagid
         AND name_id = nid;
   END IF;

   RETURN 1;

END;
' LANGUAGE 'plpgsql';

-- Read a tensor3d value from the run.
CREATE FUNCTION read_tensor3d(TEXT,
                              TEXT) RETURNS TEXT AS '
DECLARE
   val tensor3ds.value%TYPE;
BEGIN
   SELECT INTO val value
     FROM tensor3ds
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN val;
END;
' LANGUAGE 'plpgsql';

-- Delete a tensor3d value from the run.
CREATE FUNCTION delete_tensor3d(TEXT,
                                TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM tensor3ds
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Add a symmetric tensor value to the run.
CREATE FUNCTION write_symtensor1d(TEXT,
                                  TEXT,
                                  symtensor1d) RETURNS INTEGER AS '  
DECLARE
   tagid tags.id%TYPE;
   nid names.id%TYPE;
   val symtensor1ds.value%TYPE;
BEGIN 

   -- Get the IDs of the tag and the name associated with this object.
   tagid := get_tag_id($1);
   nid := get_name_id($2);

   -- Add the value to the values table, associating it with the 
   -- above name ID and tag ID.
   -- ** SIGH **
   SELECT INTO val value
     FROM symtensor1ds
    WHERE tag_id = tagid
      AND name_id = nid;

   -- If the value is found, update it.  Otherwise, insert it
   -- into the table.
   IF NOT FOUND THEN
      INSERT INTO symtensor1ds (tag_id, name_id, value)
           VALUES (tagid, nid, $3);
   ELSE
      UPDATE symtensor1ds
         SET value = $3
       WHERE tag_id = tagid
         AND name_id = nid;
   END IF;

   RETURN 1;

END;
' LANGUAGE 'plpgsql';

-- Read a symmetric tensor value from the run.
CREATE FUNCTION read_symtensor1d(TEXT,
                                 TEXT) RETURNS TEXT AS '
DECLARE
   val symtensor1ds.value%TYPE;
BEGIN
   SELECT INTO val value
     FROM symtensor1ds
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN val;
END;
' LANGUAGE 'plpgsql';

-- Delete a symtensor1d value from the run.
CREATE FUNCTION delete_symtensor1d(TEXT,
                                   TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM symtensor1ds
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Add a symmetric tensor value to the run.
CREATE FUNCTION write_symtensor2d(TEXT,
                                  TEXT,
                                  symtensor2d) RETURNS INTEGER AS '  
DECLARE
   tagid tags.id%TYPE;
   nid names.id%TYPE;
   val symtensor2ds.value%TYPE;
BEGIN 

   -- Get the IDs of the tag and the name associated with this object.
   tagid := get_tag_id($1);
   nid := get_name_id($2);

   -- Add the value to the values table, associating it with the 
   -- above name ID and tag ID.
   -- ** SIGH **
   SELECT INTO val value
     FROM symtensor2ds
    WHERE tag_id = tagid
      AND name_id = nid;

   -- If the value is found, update it.  Otherwise, insert it
   -- into the table.
   IF NOT FOUND THEN
      INSERT INTO symtensor2ds (tag_id, name_id, value)
           VALUES (tagid, nid, $3);
   ELSE
      UPDATE symtensor2ds
         SET value = $3
       WHERE tag_id = tagid
         AND name_id = nid;
   END IF;

   RETURN 1;

END;
' LANGUAGE 'plpgsql';

-- Read a symmetric tensor value from the run.
CREATE FUNCTION read_symtensor2d(TEXT,
                                 TEXT) RETURNS TEXT AS '
DECLARE
   val symtensor2ds.value%TYPE;
BEGIN
   SELECT INTO val value
     FROM symtensor2ds
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN val;
END;
' LANGUAGE 'plpgsql';

-- Delete a symtensor2d value from the run.
CREATE FUNCTION delete_symtensor2d(TEXT,
                                   TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM symtensor2ds
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Add a symmetric tensor value to the run.
CREATE FUNCTION write_symtensor3d(TEXT,
                                  TEXT,
                                  symtensor3d) RETURNS INTEGER AS '  
DECLARE
   tagid tags.id%TYPE;
   nid names.id%TYPE;
   val symtensor3ds.value%TYPE;
BEGIN 

   -- Get the IDs of the tag and the name associated with this object.
   tagid := get_tag_id($1);
   nid := get_name_id($2);

   -- Add the value to the values table, associating it with the 
   -- above name ID and tag ID.
   -- ** SIGH **
   SELECT INTO val value
     FROM symtensor3ds
    WHERE tag_id = tagid
      AND name_id = nid;

   -- If the value is found, update it.  Otherwise, insert it
   -- into the table.
   IF NOT FOUND THEN
      INSERT INTO symtensor3ds (tag_id, name_id, value)
           VALUES (tagid, nid, $3);
   ELSE
      UPDATE symtensor3ds
         SET value = $3
       WHERE tag_id = tagid
         AND name_id = nid;
   END IF;

   RETURN 1;

END;
' LANGUAGE 'plpgsql';

-- Read a symmetric tensor value from the run.
CREATE FUNCTION read_symtensor3d(TEXT,
                                 TEXT) RETURNS TEXT AS '
DECLARE
   val symtensor3ds.value%TYPE;
BEGIN
   SELECT INTO val value
     FROM symtensor3ds
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN val;
END;
' LANGUAGE 'plpgsql';

-- Delete a symtensor3d value from the run.
CREATE FUNCTION delete_symtensor3d(TEXT,
                                   TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM symtensor3ds
    WHERE tag_id = get_tag_id($1)
      AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Delete a scalar field from the database.
CREATE FUNCTION delete_scalarfield(TEXT,
                                   TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM scalarfields
         WHERE tag_id = get_tag_id($1)
           AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Delete a vector1d field from the database.
CREATE FUNCTION delete_vector1dfield(TEXT,
                                   TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM vector1dfields
         WHERE tag_id = get_tag_id($1)
           AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Delete a vector2d field from the database.
CREATE FUNCTION delete_vector2dfield(TEXT,
                                   TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM vector2dfields
         WHERE tag_id = get_tag_id($1)
           AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Delete a vector3d field from the database.
CREATE FUNCTION delete_vector3dfield(TEXT,
                                   TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM vector3dfields
         WHERE tag_id = get_tag_id($1)
           AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Delete a tensor1d field from the database.
CREATE FUNCTION delete_tensor1dfield(TEXT,
                                   TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM tensor1dfields
         WHERE tag_id = get_tag_id($1)
           AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Delete a tensor2d field from the database.
CREATE FUNCTION delete_tensor2dfield(TEXT,
                                   TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM tensor2dfields
         WHERE tag_id = get_tag_id($1)
           AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Delete a tensor3d field from the database.
CREATE FUNCTION delete_tensor3dfield(TEXT,
                                   TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM tensor3dfields
         WHERE tag_id = get_tag_id($1)
           AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Delete a symmetric tensor1d field from the database.
CREATE FUNCTION delete_symtensor1dfield(TEXT,
                                   TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM symtensor1dfields
         WHERE tag_id = get_tag_id($1)
           AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Delete a symmetric tensor2d field from the database.
CREATE FUNCTION delete_symtensor2dfield(TEXT,
                                   TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM symtensor2dfields
         WHERE tag_id = get_tag_id($1)
           AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';

-- Delete a symmetric tensor3d field from the database.
CREATE FUNCTION delete_symtensor3dfield(TEXT,
                                   TEXT) RETURNS INTEGER AS '
BEGIN
   DELETE FROM symtensor3dfields
         WHERE tag_id = get_tag_id($1)
           AND name_id = get_name_id($2);
   RETURN 1;
END;
' LANGUAGE 'plpgsql';


