# -*- mode: python -*-
#-------------------------------------------------------------------------------
# Master SpheralModules file for generating the Spheral++ python bindings.
#-------------------------------------------------------------------------------
import os
import sys

# Path variables.
global topsrcdir
global srcdir
topsrcdir = "@abs_top_srcdir@"
srcdir = "@abs_srcdir@"
sys.path.extend([topsrcdir, srcdir])

from pybindgen import *
from SpheralMultiSectionFactory import SpheralMultiSectionFactory

# A few useful global pybindgen settings.
settings.allow_subclassing = True
settings.deprecated_virtuals = False

# This is necessary to avoid creating new unnecessary python objects all the time => memory leaks!
# settings.wrapper_registry = settings.StdMapWrapperRegistry

# The set packages we're going to process.
pkgs_string = "@PYTHONPKGS@"
pkgs = pkgs_string.split()

# The dimensions we're instantiating.
dims_string = "@DIMS@"
dims = [int(x) for x in dims_string.split()]

# Extract the desired output files.
outfile = sys.argv[1].replace("Bindings", "")
assert outfile[-2:] == ".C"
print "Parsing pybindgen packages: ", pkgs

#-------------------------------------------------------------------------------
# Create the SpheralModules module.
#-------------------------------------------------------------------------------
mod = Module("SpheralModules")
mod.add_include('"%s"' % os.path.join(srcdir, "referenceAsPointer.hh"))

# Go through each package and add its stuff to the module.
for p in pkgs:
    print "Generating types for %s" % p
    modname = "%sModule" % p
    exec("import %s" % modname)
    mod.begin_section("SpheralModules_%s" % p)
    exec("%s = %s.%s(mod, '%s', '%s', %s)" % (p, modname, p, "%s/%s" % (srcdir, p), topsrcdir, dims))
    mod.end_section("SpheralModules_%s" % p)

# Now bind methods to the objects.
for p in pkgs:
    print "Binding methods for objects in %s" % p
    mod.begin_section("SpheralModules_%s" % p)
    exec("%s.generateBindings(mod)" % p)
    mod.end_section("SpheralModules_%s" % p)

#-------------------------------------------------------------------------------
# Generate the C code.
#-------------------------------------------------------------------------------
if __name__ == "__main__":
    print "Generating C code."
    out = SpheralMultiSectionFactory(outfile, pkgs)
    print "Section sinks:  ", out.section_sinks
    mod.generate(out, "SpheralModules")
    out.close()
