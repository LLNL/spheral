//---------------------------------Spheral++----------------------------------//
// SymmetricTriangularValues
//
// Symmetric triangular quadrature with positive weights
// https://doi.org/10.1016/j.camwa.2015.03.017
//----------------------------------------------------------------------------//
#include "SymmetricTriangularValues.hh"

#include "Utilities/DBC.hh"

namespace Spheral {

int
SymmetricTriangularValues::
numOrdinatesForOrder(const int order) {
  switch (order) {
  case 1: return 1;
  case 2: return 3;
  case 3: // drop to 4
  case 4: return 6;
  case 5: return 7;
  case 6: return 12;
  case 7: return 15;
  case 8: return 16;
  case 9: return 19;
  case 10: return 25;
  default: VERIFY2(false, "SymmetricTriangularValues: order not available");
  }
  return -1;
}

int
SymmetricTriangularValues::
orderForNumOrdinates(const int numOrdinates) {
  switch (numOrdinates) {
  case 1: return 1;
  case 3: return 2;
  case 6: return 4;
  case 7: return 5;
  case 12: return 6;
  case 15: return 7;
  case 16: return 8;
  case 19: return 9;
  case 25: return 10;
  default: VERIFY2(false, "SymmetricTriangularValues: numOrdinates not available");
  }
  return -1;
}

const std::vector<double>&
SymmetricTriangularValues::
getValues(const int numOrdinates) {
  switch (numOrdinates) {
  case 1: return values1;
  case 3: return values3;
  case 6: return values6;
  case 7: return values7;
  case 12: return values12;
  case 15: return values15;
  case 16: return values16;
  case 19: return values19;
  case 25: return values25;
  default: VERIFY2(false, "SymmetricTriangularValues: quadrature not found");
  }
  return values1; // So compilers don't complain
}

void
SymmetricTriangularValues::
getQuadrature(const int numOrdinates,
              std::vector<double>& weights,
              std::vector<Dim<2>::Vector>& ordinates) {
  // Get the quadrature values
  const auto& values = getValues(numOrdinates);
  const auto dataLength = 3;
  CHECK(values.size() == size_t(numOrdinates * dataLength));
  
  // Initialize the data
  ordinates.resize(numOrdinates);
  weights.resize(numOrdinates);
  
  // Convert ordinates from x+y\in(-1,1) to x+y\in(0,1) and weights from 2 to 0.5
  for (auto i = 0; i < numOrdinates; ++i) {
    ordinates[i][0] = 0.5 * (values[0 + dataLength * i] + 1.);
    ordinates[i][1] = 0.5 * (values[1 + dataLength * i] + 1.);
    weights[i] = 0.25 * values[2 + dataLength * i];
  }
}

void
SymmetricTriangularValues::
getQuadrature(const int numOrdinates,
              std::vector<double>& weights,
              std::vector<Dim<3>::Vector>& ordinates) {
  // Get the quadrature values
  const auto& values = getValues(numOrdinates);
  const auto dataLength = 3;
  CHECK(values.size() == size_t(numOrdinates * dataLength));
  
  // Initialize the data
  ordinates.assign(numOrdinates, Dim<3>::Vector::zero);
  weights.resize(numOrdinates);
  
  // Convert ordinates from x+y\in(-1,1) to x+y\in(0,1) and weights from 2 to 0.5
  for (auto i = 0; i < numOrdinates; ++i) {
    ordinates[i][0] = 0.5 * (values[0 + dataLength * i] + 1.);
    ordinates[i][1] = 0.5 * (values[1 + dataLength * i] + 1.);
    weights[i] = 0.25 * values[2 + dataLength * i];
  }
}

const std::vector<double> SymmetricTriangularValues::values1 =
  {-0.33333333333333333333333333333333333333, -0.33333333333333333333333333333333333333, 2};
const std::vector<double> SymmetricTriangularValues::values3 =
  {-0.66666666666666666666666666666666666667, 0.33333333333333333333333333333333333333, 0.66666666666666666666666666666666666667,
   0.33333333333333333333333333333333333333, -0.66666666666666666666666666666666666667, 0.66666666666666666666666666666666666667,
   -0.66666666666666666666666666666666666667, -0.66666666666666666666666666666666666667, 0.66666666666666666666666666666666666667};
const std::vector<double> SymmetricTriangularValues::values6 =
  {-0.1081030181680702273633414922338960232, -0.7837939636638595452733170155322079536, 0.44676317935602293139001401686624560874,
   -0.7837939636638595452733170155322079536, -0.1081030181680702273633414922338960232, 0.44676317935602293139001401686624560874,
   -0.1081030181680702273633414922338960232, -0.1081030181680702273633414922338960232, 0.44676317935602293139001401686624560874,
   -0.81684757298045851308085707319559698429, 0.63369514596091702616171414639119396858, 0.21990348731064373527665264980042105793,
   0.63369514596091702616171414639119396858, -0.81684757298045851308085707319559698429, 0.21990348731064373527665264980042105793,
   -0.81684757298045851308085707319559698429, -0.81684757298045851308085707319559698429, 0.21990348731064373527665264980042105793};
const std::vector<double> SymmetricTriangularValues::values7 =
  {-0.33333333333333333333333333333333333333, -0.33333333333333333333333333333333333333, 0.45,
   -0.79742698535308732239802527616975234389, 0.59485397070617464479605055233950468778, 0.25187836108965430519136789100036266732,
   0.59485397070617464479605055233950468778, -0.79742698535308732239802527616975234389, 0.25187836108965430519136789100036266732,
   -0.79742698535308732239802527616975234389, -0.79742698535308732239802527616975234389, 0.25187836108965430519136789100036266732,
   -0.059715871789769820459117580973104798968, -0.88056825642046035908176483805379040206, 0.26478830557701236147529877566630399935,
   -0.88056825642046035908176483805379040206, -0.059715871789769820459117580973104798968, 0.26478830557701236147529877566630399935,
   -0.059715871789769820459117580973104798968, -0.059715871789769820459117580973104798968, 0.26478830557701236147529877566630399935};
const std::vector<double> SymmetricTriangularValues::values12 =
  {-0.87382197101699554331933679425836168532, 0.74764394203399108663867358851672337064, 0.10168981274041363384187361821373796809,
   0.74764394203399108663867358851672337064, -0.87382197101699554331933679425836168532, 0.10168981274041363384187361821373796809,
   -0.87382197101699554331933679425836168532, -0.87382197101699554331933679425836168532, 0.10168981274041363384187361821373796809,
   -0.50142650965817915741672289378596184782, 0.0028530193163583148334457875719236956481, 0.23357255145275873205057922277115888265,
   0.0028530193163583148334457875719236956481, -0.50142650965817915741672289378596184782, 0.23357255145275873205057922277115888265,
   -0.50142650965817915741672289378596184782, -0.50142650965817915741672289378596184782, 0.23357255145275873205057922277115888265,
   -0.89370990031036610529350065673720370601, 0.27300499824279729446028518882409939961, 0.16570215123674715038710691284088490796,
   0.27300499824279729446028518882409939961, -0.89370990031036610529350065673720370601, 0.16570215123674715038710691284088490796,
   -0.37929509793243118916678453208689569359, 0.27300499824279729446028518882409939961, 0.16570215123674715038710691284088490796,
   0.27300499824279729446028518882409939961, -0.37929509793243118916678453208689569359, 0.16570215123674715038710691284088490796,
   -0.37929509793243118916678453208689569359, -0.89370990031036610529350065673720370601, 0.16570215123674715038710691284088490796,
   -0.89370990031036610529350065673720370601, -0.37929509793243118916678453208689569359, 0.16570215123674715038710691284088490796};
const std::vector<double> SymmetricTriangularValues::values15 =
  {-0.93253870289082430257005654739836752385, 0.8650774057816486051401130947967350477, 0.033090100221584262071955896945834891238,
   0.8650774057816486051401130947967350477, -0.93253870289082430257005654739836752385, 0.033090100221584262071955896945834891238,
   -0.93253870289082430257005654739836752385, -0.93253870289082430257005654739836752385, 0.033090100221584262071955896945834891238,
   -0.51684523480919288209962646032443600082, 0.033690469618385764199252920648872001638, 0.25588834246031114556580247036929262133,
   0.033690469618385764199252920648872001638, -0.51684523480919288209962646032443600082, 0.25588834246031114556580247036929262133,
   -0.51684523480919288209962646032443600082, -0.51684523480919288209962646032443600082, 0.25588834246031114556580247036929262133,
   -0.051380614990563531580838528101628435036, -0.89723877001887293683832294379674312993, 0.15417329237197213566964304166748277293,
   -0.89723877001887293683832294379674312993, -0.051380614990563531580838528101628435036, 0.15417329237197213566964304166748277293,
   -0.051380614990563531580838528101628435036, -0.051380614990563531580838528101628435036, 0.15417329237197213566964304166748277293,
   -0.90592671069480953331718004928623004897, 0.50856008110010635471247864925623992738, 0.11175746580639956167963262884202819059,
   0.50856008110010635471247864925623992738, -0.90592671069480953331718004928623004897, 0.11175746580639956167963262884202819059,
   -0.60263337040529682139529859997000987842, 0.50856008110010635471247864925623992738, 0.11175746580639956167963262884202819059,
   0.50856008110010635471247864925623992738, -0.60263337040529682139529859997000987842, 0.11175746580639956167963262884202819059,
   -0.60263337040529682139529859997000987842, -0.90592671069480953331718004928623004897, 0.11175746580639956167963262884202819059,
   -0.90592671069480953331718004928623004897, -0.60263337040529682139529859997000987842, 0.11175746580639956167963262884202819059};
const std::vector<double> SymmetricTriangularValues::values16 =
  {-0.33333333333333333333333333333333333333, -0.33333333333333333333333333333333333333, 0.2886312153555743365021822209781292496,
   -0.081414823414553687942368971011661355879, -0.83717035317089262411526205797667728824, 0.1901832685345692495877922087771686332,
   -0.83717035317089262411526205797667728824, -0.081414823414553687942368971011661355879, 0.1901832685345692495877922087771686332,
   -0.081414823414553687942368971011661355879, -0.081414823414553687942368971011661355879, 0.1901832685345692495877922087771686332,
   -0.65886138449647958675541299701707099796, 0.31772276899295917351082599403414199593, 0.20643474106943650056358310058425806003,
   0.31772276899295917351082599403414199593, -0.65886138449647958675541299701707099796, 0.20643474106943650056358310058425806003,
   -0.65886138449647958675541299701707099796, -0.65886138449647958675541299701707099796, 0.20643474106943650056358310058425806003,
   -0.89890554336593804908315289880680210631, 0.79781108673187609816630579761360421262, 0.064916995246396160621851856683561193593,
   0.79781108673187609816630579761360421262, -0.89890554336593804908315289880680210631, 0.064916995246396160621851856683561193593,
   -0.89890554336593804908315289880680210631, -0.89890554336593804908315289880680210631, 0.064916995246396160621851856683561193593,
   -0.98321044518008478932557233092141110162, 0.45698478591080856248200075835212392604, 0.05446062834886998852968938014781784832,
   0.45698478591080856248200075835212392604, -0.98321044518008478932557233092141110162, 0.05446062834886998852968938014781784832,
   -0.47377434073072377315642842743071282442, 0.45698478591080856248200075835212392604, 0.05446062834886998852968938014781784832,
   0.45698478591080856248200075835212392604, -0.47377434073072377315642842743071282442, 0.05446062834886998852968938014781784832,
   -0.47377434073072377315642842743071282442, -0.98321044518008478932557233092141110162, 0.05446062834886998852968938014781784832,
   -0.98321044518008478932557233092141110162, -0.47377434073072377315642842743071282442, 0.05446062834886998852968938014781784832};
const std::vector<double> SymmetricTriangularValues::values19 =
  {-0.33333333333333333333333333333333333333, -0.33333333333333333333333333333333333333, 0.19427159256559766763848396501457725948,
   -0.12582081701412672546013927112929005464, -0.74835836597174654907972145774141989072, 0.15565508200954855863347871259880791224,
   -0.74835836597174654907972145774141989072, -0.12582081701412672546013927112929005464, 0.15565508200954855863347871259880791224,
   -0.12582081701412672546013927112929005464, -0.12582081701412672546013927112929005464, 0.15565508200954855863347871259880791224,
   -0.62359292876193453951807743906532886378, 0.24718585752386907903615487813065772755, 0.1592954778544205060657835485280905465,
   0.24718585752386907903615487813065772755, -0.62359292876193453951807743906532886378, 0.1592954778544205060657835485280905465,
   -0.62359292876193453951807743906532886378, -0.62359292876193453951807743906532886378, 0.1592954778544205060657835485280905465,
   -0.020634961602524744432586150327614401262, -0.95873007679495051113482769934477119748, 0.062669400454278141073709662574418630986,
   -0.95873007679495051113482769934477119748, -0.020634961602524744432586150327614401262, 0.062669400454278141073709662574418630986,
   -0.020634961602524744432586150327614401262, -0.020634961602524744432586150327614401262, 0.062669400454278141073709662574418630986,
   -0.91054097321109458026978682006744727, 0.82108194642218916053957364013489454, 0.051155351317396062523357597117999647955,
   0.82108194642218916053957364013489454, -0.91054097321109458026978682006744727, 0.051155351317396062523357597117999647955,
   -0.91054097321109458026978682006744727, -0.91054097321109458026978682006744727, 0.051155351317396062523357597117999647955,
   -0.92632317589052743273036480243322979538, 0.48239719756899604138015974704684765487, 0.086567078754578754578754578754578754579,
   0.48239719756899604138015974704684765487, -0.92632317589052743273036480243322979538, 0.086567078754578754578754578754578754579,
   -0.55607402167846860864979494461361785949, 0.48239719756899604138015974704684765487, 0.086567078754578754578754578754578754579,
   0.48239719756899604138015974704684765487, -0.55607402167846860864979494461361785949, 0.086567078754578754578754578754578754579,
   -0.55607402167846860864979494461361785949, -0.92632317589052743273036480243322979538, 0.086567078754578754578754578754578754579,
   -0.92632317589052743273036480243322979538, -0.55607402167846860864979494461361785949, 0.086567078754578754578754578754578754579};
const std::vector<double> SymmetricTriangularValues::values25 =
  {-0.33333333333333333333333333333333333333, -0.33333333333333333333333333333333333333, 0.16348665829257193285623736996835522439,
   -0.93588925356611297413803082132702052207, 0.87177850713222594827606164265404104414, 0.026705937626299132551145956798137306994,
   0.87177850713222594827606164265404104414, -0.93588925356611297413803082132702052207, 0.026705937626299132551145956798137306994,
   -0.93588925356611297413803082132702052207, -0.93588925356611297413803082132702052207, 0.026705937626299132551145956798137306994,
   -0.71567779788687122981567579361808335656, 0.43135559577374245963135158723616671312, 0.0919159272094894560275758192650956328,
   0.43135559577374245963135158723616671312, -0.71567779788687122981567579361808335656, 0.0919159272094894560275758192650956328,
   -0.71567779788687122981567579361808335656, -0.71567779788687122981567579361808335656, 0.0919159272094894560275758192650956328,
   -0.35637400942232915754980487802790257253, 0.060108237854688056554191347891388233782, 0.12780981279284809086579746752530664373,
   0.060108237854688056554191347891388233782, -0.35637400942232915754980487802790257253, 0.12780981279284809086579746752530664373,
   -0.70373422843235889900438646986348566125, 0.060108237854688056554191347891388233782, 0.12780981279284809086579746752530664373,
   0.060108237854688056554191347891388233782, -0.70373422843235889900438646986348566125, 0.12780981279284809086579746752530664373,
   -0.70373422843235889900438646986348566125, -0.35637400942232915754980487802790257253, 0.12780981279284809086579746752530664373,
   -0.35637400942232915754980487802790257253, -0.70373422843235889900438646986348566125, 0.12780981279284809086579746752530664373,
   -0.94076022102254046473232746114791439895, 0.20246665736691849090948578691737561875, 0.068369296325918857257383168082684580517,
   0.20246665736691849090948578691737561875, -0.94076022102254046473232746114791439895, 0.068369296325918857257383168082684580517,
   -0.2617064363443780261771583257694612198, 0.20246665736691849090948578691737561875, 0.068369296325918857257383168082684580517,
   0.20246665736691849090948578691737561875, -0.2617064363443780261771583257694612198, 0.068369296325918857257383168082684580517,
   -0.2617064363443780261771583257694612198, -0.94076022102254046473232746114791439895, 0.068369296325918857257383168082684580517,
   -0.94076022102254046473232746114791439895, -0.2617064363443780261771583257694612198, 0.068369296325918857257383168082684580517,
   -0.94326466932012312149912848884373958881, 0.61586120184575813015989980576348821814, 0.050595515414576768778085581365666435125,
   0.61586120184575813015989980576348821814, -0.94326466932012312149912848884373958881, 0.050595515414576768778085581365666435125,
   -0.67259653252563500866077131691974862932, 0.61586120184575813015989980576348821814, 0.050595515414576768778085581365666435125,
   0.61586120184575813015989980576348821814, -0.67259653252563500866077131691974862932, 0.050595515414576768778085581365666435125,
   -0.67259653252563500866077131691974862932, -0.94326466932012312149912848884373958881, 0.050595515414576768778085581365666435125,
   -0.94326466932012312149912848884373958881, -0.67259653252563500866077131691974862932, 0.050595515414576768778085581365666435125};
 
} // end namespace Spheral
