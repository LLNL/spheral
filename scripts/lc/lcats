#!/usr/bin/env python3

import os, time, sys
import time
import platform
import sys
import argparse, re
import subprocess
import copy

d_debug= 0

SYS_TYPE = os.environ.get('SYS_TYPE','')
# This is better than platform.node() some of the time, because it differentiates between jade, jadeita, and jadedev.
LCSCHEDCLUSTER = os.environ.get('LCSCHEDCLUSTER','')

#------------------------------------------------------------------------

class MachineInfo:
    def __init__ (self, **options):
        self.name = ''
        self.allocTime = 120
        self.timeCmd = '--time'
        self.timeLimit = 120
        self.machineType = ''
        self.numNodes = 4
        self.procsPerNode = None
        self.allocCmd = None
        self.nodeCmd = ''
        self.gpusPerNode = 0
        self.group = ''
        self.groupCmd = ''
        self.partition = 'pbatch'
        self.partitionCmd = '-p'

        self.bank = ''
        self.defaultAtsArgs = [
            "--continueFreq=15",
            "--timelimit=120"]
        self.atsArgs = []
        self.envArgs = []
        self.__dict__.update(options)

    def get_ats_args(self):
        args_list = " ".join(str(x) for x in self.defaultAtsArgs + self.atsArgs)
        args_list += f" --numNodes {self.numNodes} --allInteractive"
        return args_list

    def get_launch_cmd(self):
        launch_cmd = f"{self.allocCmd} {self.nodeCmd} {self.numNodes} {self.timeCmd} {self.allocTime}"
        if (self.group):
            launch_cmd += f" {self.groupCmd} {self.group}"
        if (self.partition):
            launch_cmd += f" {self.partitionCmd} {self.partition}"
        return launch_cmd

    def get_num_procs(self):
        return self.numNodes * self.procsPerNode

class blueOS(MachineInfo):
    def __init__ (self, **options):
        "Must not throw an exception -- object must always get created."
        super(MachineInfo, self).__init__()
        self.name = '',
        self.allocTime = 240
        self.timeCmd = '-W'
        self.machineType = 'blueos_3_ppc64le_ib_p9'
        self.numNodes = 4
        self.procsPerNode = 40
        self.gpusPerNode = 4
        self.allocCmd = '/usr/tcetmp/bin/lalloc'
        self.nodeCmd = ""
        self.group = 'guests'
        self.groupCmd = '-G'
        self.bank = 'guests'
        self.partition = 'pdebug'
        self.partitionCmd = '-q'
        self.atsArgs = ["--smpi_off",
                        "--npMax=36",
                        "--glue='noDraco=True'",
                        "--glue='noVisit=True'",
                        "--glue='noOpacityServer=True'",
                        "--glue='noCxxUnitTesting=True'"]
        self.envArgs = []
        self.__dict__.update(options)

class toss4(MachineInfo):
    def __init__ (self, **options):
        super(MachineInfo, self).__init__()
        self.name = '',
        self.allocTime = 180
        self.machineType = 'slurm36'
        self.numNodes = 2
        self.procsPerNode = 36
        self.gpusPerNode = 0
        self.allocCmd = 'salloc --exclusive'
        self.nodeCmd = "-N"
        self.group = ''
        self.bank = 'wbronze'
        self.partition = 'pdebug'
        self.partitionCmd = '-p'
        self.atsArgs = ["--npMax=40"]
        self.envArgs = []
        self.__dict__.update(options)

#---------------------------------------------------------------------------
# MAIN
#---------------------------------------------------------------------------

#---------------------------------------------------------------------------
# Setup machine info classes
#-----------------------------------------------------------------------

lassenSettings = blueOS(name="lassen")
rzanselSettings = blueOS(name="rzansel")

rubySettings = toss4(name="ruby", partition="")
rzgenieSettings = toss4(name="rzgenie")
rzwhippetSettings = toss4(name="rzwhippet", procsPerNode=112)

allSettings = [lassenSettings, rzanselSettings, rubySettings, rzgenieSettings]
macNames = {x.name: x for x in allSettings}

#---------------------------------------------------------------------------
# Setup argument parser
#---------------------------------------------------------------------------
parser = argparse.ArgumentParser()

parser.add_argument( "--allocTime", type=int, metavar="minutes", dest="allocTime",
                   help = "The amount of time for the batch job (in minutes) .")

parser.add_argument( "--machine", type=str, default=None, choices=list(macNames.keys()),
                   help="Sets the machine for ats.")

parser.add_argument( "--numNodes", type=int,
                   help="Number of nodes to allocate for ats to run in.")

parser.add_argument( "--partition", type=str,
                   help = "Partition in which to run jobs.")

parser.add_argument( "--bank", type=str,
                   help = "Bank to use for batch job.")

parser.add_argument("--wcid", type=str,
                  help = "HERT WC-ID to use for batch job.")

parser.add_argument( "--sanitize", action="store_true", dest="sanitize",
                   help = "Run sanitize tests. NOTE These need a specific build to work. ")

#---------------------------------------------------------------------------
# other options
#---------------------------------------------------------------------------
ezatsLocaltime = time.localtime()
ezatsStartTime = time.strftime("%y%m%d%H%M%S",ezatsLocaltime)
msubFilenameDefault= "tmpAts." +  ezatsStartTime + ".job"
bsubFilenameDefault= "tmpAts." +  ezatsStartTime + ".job"
parser.add_argument( "--msubFilename", type=str,
                   default = msubFilenameDefault, help = "The name of the generated ats msub job script that will be run.")

parser.add_argument( "--bsubFilename", type=str,
                   default = bsubFilenameDefault, help = "The name of the generated ats bsub job script that will be run.")

parser.add_argument( '--timelimit', dest='timelimit', default=30,
                   help='Set the default time limit on each test. The value may be given as a digit followed by an s, m, or h to give the time in seconds, minutes (the default), or hours.')

# The P2 version is a sym-link to the latest python 2 version of ATS.  There's a P3 when we're ready for Python3
parser.add_argument( "--atsExe", type=str, default="/usr/apps/ats/7.0.P3/bin/ats", help="Sets which ats to use.")

parser.add_argument( "--testpath", type=str, default="",
                  help="Specifies a path for ezats to use for unique test output.")

# Pass through options
parser.add_argument("passthrough", nargs="*",
                    help="Anything beyond a blank -- is passed through to the ats call")

options = parser.parse_args()

#---------------------------------------------------------------------------
# Determine machine settings to use
#-----------------------------------------------------------------------

if options.machine:
    machineSettings = macNames[options.machine]
elif LCSCHEDCLUSTER in macNames:
    machineSettings = macNames[LCSCHEDCLUSTER]
else:
    print("Could not determine machine settings to use.")
    sys.exit(1)

print("Selected machine settings for: ", machineSettings.name)

#---------------------------------------------------------------------------
# options affecting machine settings
#---------------------------------------------------------------------------

if options.allocTime:
    machineSettings.allocTime = options.allocTime

if options.numNodes:
    machineSettings.numNodes = options.numNodes

if options.partition:
    machineSettings.partition = options.partition

if options.bank:
    machineSettings.bank = options.bank

if options.wcid:
    machineSettings.wcid = options.wcid

atsArgs = " ".join(str(x) for x in options.passthrough)

print("Note:  the srun message 'error: ioctl(TIOCGWINSZ)' can be ignored.  \n[It means the process is trying to do something that requires a tty \nbut it's not doing either a read or write.]\n")

toAdd = ""
# Add glue arg to pass unique file system test path to ats
if (options.testpath):
    toAdd= """ --glue='testpath=str("%s")' """ % options.testpath

if options.sanitize:
    toAdd += """ --filter="sanitize==1" """

#toAdd += " ".join(x for x in machineSettings.atsArgs if x not in atsArgs)

AtsRunCmd = f"{options.atsExe} {toAdd} {atsArgs} {machineSettings.get_ats_args()}"

os.environ["MACHINE_TYPE"] = machineSettings.machineType
os.environ["BATCH_TYPE"] = "None"

finalCommandToRun = machineSettings.get_launch_cmd() + " " + AtsRunCmd
# Remove all extra spaces
finalCommandToRun = re.sub(r"\s+", " ", finalCommandToRun.strip())

print(f"Running command:\n   {finalCommandToRun}")

from subprocess import check_call
try:
    check_call( finalCommandToRun,shell=True )
except Exception as e:
    print("Caught - non-zero exit status 3 - thrown by final command", e)
