# ------------------------------------------------------------------------------
# CI Job Scripts
# ------------------------------------------------------------------------------


.tpls:
  stage: tpls
  script:
    - echo $USER
    - CI_BUILD_DIR=$SPHERAL_BUILDS_DIR/$CI_JOB_ID/project
    - echo $CI_BUILD_DIR &> ci-dir.txt && echo $CI_JOB_NAME &> job-name.txt
    - echo $CI_BUILD_DIR && echo $CI_PROJECT_DIR
    - mkdir -p $CI_BUILD_DIR && cp -a $CI_PROJECT_DIR/. $CI_BUILD_DIR
    - cd $CI_BUILD_DIR
    - echo $SPEC

    - ./$SCRIPT_DIR/gitlab/build_and_install.py --spec="$SPEC" --tpls-only
  artifacts:
    paths:
      - ci-dir.txt
      - job-name.txt

.build:
  stage: build_and_install
  variables:
    GIT_STRATEGY: none
  script:
    - CI_BUILD_DIR=$(cat ci-dir.txt)
    - cd $CI_BUILD_DIR && cat job-name.txt
    - ./$SCRIPT_DIR/devtools/host-config-build.py --no-clean --build --nprocs $NPROC --host-config gitlab.cmake -DENABLE_TIMER=ON $EXTRA_CMAKE_ARGS
  artifacts:
    paths:
      - ci-dir.txt
      - job-name.txt

.build_and_test:
  extends: [.build]
  after_script:
    - CI_BUILD_DIR=$(cat ci-dir.txt)
    - cd $CI_BUILD_DIR && cat job-name.txt

    - ./build_gitlab/install/spheral -c "import $SPHERAL_MODULE"
  artifacts:
    paths:
      - ci-dir.txt
      - job-name.txt

.run_ats:
  stage: run_ats
  variables:
    GIT_STRATEGY: none
    FF_ENABLE_BASH_EXIT_CODE_CHECK: 1
    FF_USE_NEW_BASH_EVAL_STRATEGY: 1
  script:
    - CI_BUILD_DIR=$(cat ci-dir.txt)
    - cd $CI_BUILD_DIR && cat job-name.txt

    - ./build_gitlab/install/spheral-ats --ciRun ./build_gitlab/install/$ATS_FILE || exit_code=$?
    - cp -r test-logs $CI_PROJECT_DIR
    - exit $exit_code
  artifacts:
    when: always
    paths:
      - ci-dir.txt
      - test-logs/
  allow_failure:
    exit_codes:
      - 80

# Run the performance suite and move the resulting Caliper files into the benchmark location
.run_perf:
  stage: run_perf
  variables:
    GIT_STRATEGY: none
    FF_ENABLE_BASH_EXIT_CODE_CHECK: 1
    FF_USE_NEW_BASH_EVAL_STRATEGY: 1
  script:
    - CI_BUILD_DIR=$(cat ci-dir.txt)
    - cd $CI_BUILD_DIR && cat job-name.txt

    - ./build_gitlab/install/spheral-ats --ciRun --numNodes 2 --logs perf_logs ./build_gitlab/install/$PERF_ATS_FILE || exit_code=$?
    - exit $exit_code
  artifacts:
    when: always
    paths:
      - ci-dir.txt

.cleanup_dir:
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  script:
    - CI_BUILD_DIR=$(cat ci-dir.txt)

    - ml load mpifileutils
    - cd $SPHERAL_BUILDS_DIR
    - drm $CI_BUILD_DIR/..

# ------------------------------------------------------------------------------
# Shared TPL scripts.
# ------------------------------------------------------------------------------

.update_tpls:
  stage: update_tpls
  script:
    - ./$SCRIPT_DIR/devtools/tpl-manager.py --no-upstream --spec-list="$SCRIPT_DIR/devtools/spec-list.json" --spheral-spack-dir=$UPSTREAM_DIR

.toss_update_permissions:
  stage: update_permissions
  variables:
    GIT_STRATEGY: none
  script:
    - ml load mpifileutils
    - dchmod --mode go+rx $UPSTREAM_DIR

# ------------------------------------------------------------------------------
# Production Installation scripts
# ------------------------------------------------------------------------------

### Create a tar file containing:
#
# dev-pkg/
#   *cloned spheral repo.*
#   resources/
#     mirror/
#     build_cache/
#     bootstrap/
#       metadata/
#       bootstrap_cache/

.build_dev_pkg:
  stage: generate_buildcache
  extends: [.spheral_rev_str]
  script:
    - INSTALL_DIR=/usr/gapps/Spheral/$SYS_TYPE/spheral-$SPHERAL_REV_STR
    - DEV_PKG_NAME=$SYS_TYPE-spheral-dev-pkg-$SPHERAL_REV_STR

    - env SPHERAL_REV_STR=$SPHERAL_REV_STR INSTALL_DIR=$INSTALL_DIR SPEC=$SPEC SPACK_PKG_NAME=$SPACK_PKG_NAME SCRIPT_DIR=$SCRIPT_DIR
      bash ./$SCRIPT_DIR/lc/generate-buildcache.sh

    - echo $INSTALL_DIR &> install-dir.txt
    - echo $DEV_PKG_NAME &> dev-pkg-name.txt

  artifacts:
    paths:
      - install-dir.txt
      - dev-pkg-name.txt


.install_dev_pkg:
  stage: install_production
  variables:
    GIT_STRATEGY: none
  script:
    - INSTALL_DIR=$(cat install-dir.txt)
    - DEV_PKG_NAME=$(cat dev-pkg-name.txt)

    - cp $INSTALL_DIR/$DEV_PKG_NAME.tar.gz .
    - tar -xzf $DEV_PKG_NAME.tar.gz
    - cd $DEV_PKG_NAME

    - env INSTALL_DIR=$INSTALL_DIR SPEC=$SPEC SPACK_PKG_NAME=$SPACK_PKG_NAME BUILD_ALLOC="" SCRIPT_DIR=$SCRIPT_DIR
      bash ./$SCRIPT_DIR/lc/install-from-dev-pkg.sh

  artifacts:
    paths:
      - install-dir.txt


.prod_permissions:
  stage: update_permissions
  variables:
    GIT_STRATEGY: none
  script:
    - INSTALL_DIR=$(cat install-dir.txt)

    - sed 's/YYYY\.MM\.p/'"$ALIAS"'/g' $SCRIPT_DIR/lc/modulefile-template.lua > /usr/gapps/Spheral/modulefiles/Spheral/"$ALIAS".lua
    - chmod go+r /usr/gapps/Spheral/modulefiles/Spheral/"$ALIAS".lua

    - ml load mpifileutils
    - dchmod --mode go+rx $INSTALL_DIR
    - ln -sfn $INSTALL_DIR /usr/gapps/Spheral/$SYS_TYPE/$ALIAS


# ------------------------------------------------------------------------------
# Script Utilities
# ------------------------------------------------------------------------------

# This job searches our SPHERAL_BUILDS_DIR and deletes all but the N most recent builds.
# This should be enough of a buffer that we likely won't delete a build mid pipeline,
# and never fill the sphapp workspace storage.
.clean_old_dirs:
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  script:
    - cd $SPHERAL_BUILDS_DIR

    - MAX_DIR=30
    - DIR_LIST=$(ls -ltd * | sed "1, $MAX_DIR d" | rev | cut -d ' ' -f1 | rev | paste -sd ' ' - )
    - echo $DIR_LIST

    - ml load mpifileutils
    - if [[ $DIR_LIST ]]; then drm $DIR_LIST; else echo "No directories to remove at this time."; fi
  when: always

.merge_pr_rule:
  rules:
    - if: '$CI_COMMIT_REF_NAME == "develop"'
      when: always

.tag_release_rule:
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
